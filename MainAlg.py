import math
import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
import random
import sklearn
#from sklearn.preprocessing import StandardScaler
#from skbio import DistanceMatrix ####relative abundance / bray curtis
#from skbio.stats.ordination import pcoa #####pca
#from skbio.diversity import beta_diversity
import seaborn as sns
#import statannot
from scipy.stats import mannwhitneyu
from sklearn.metrics import roc_auc_score, precision_recall_curve
from sklearn.metrics import auc
from sklearn.ensemble import IsolationForest
from sklearn.metrics import PrecisionRecallDisplay


class Tree_Node:
    def __init__(self, depth=0, left=None, right=None, split_att=None, split_val=None, size=0, samples=[]):
        self.depth = depth
        self.left = left
        self.right = right
        self.split_att = split_att
        self.split_val = split_val
        self.size = size
        self.samples = samples

'''omriTree is represented by it's root (treeNode type)'''
class Forest:
    def __init__(self, number_of_trees=0, trees=[]):
        self.number_of_trees = number_of_trees
        self.trees = trees

    '''
        inputs: X=input data, t=number of trees, psi=sub sampling size, l=depth limit
        function: Creates forest of omriTrees.
        output: an omriForest
    '''
    def fit(self, X, OTUs, psi, l, t=100, distance_matrix="de_brui"):
        for i in range(t):
            self.trees.append(omri_tree(X, OTUs, 0, l, psi, distance_matrix, 0))
            self.number_of_trees += 1


'''
    inputs: X=input data, OTUs=taxa, e=current tree depth, l=depth limit, psi=sub sampling size, distance_matrix = chosen function to calcukate distance matrix
    function:
    output: an omriTree represented by it's root (treeNode type)
'''
def omri_tree(X, OTUs, e, l, psi, distance_matrix, random_state=0):
    #np.random.seed(0)

    X = filter_features(X) # remove features with few data

    if X.empty:
        return None

    elif e >= l or len(X.iloc[0]) <= 1 or len(X) <= 10:
        return Tree_Node(depth=e, size=len(X), samples=X.columns)

    else:

        if len(X) < psi:
            sampled_X = X
        else:
            sampled_X = X.sample(n=psi, random_state=random_state) # sub-sampling of data, only psi features are remain
        renormalized_X = relative_abundence(sampled_X)
        #ids = [OTUs[i] for i in sampled_X.index] #####??????????

        # distance_mat = beta_diversity(distance_matrix, renormalized_X, ids)
        distance_mat = renormalized_X
        #not sure if it's needed
        #sc = StandardScaler()
        #sc.fit(distance_mat)
        #distance_mat_std = sc.transform(distance_mat)
        #print(distance_mat_std.isnull())
        #pc1 = pcoa(distance_mat).samples[['PC1']] ####????? extract 1st pcoa

        # if (distance_mat.sum(axis=0) <= 0).any() or distance_mat.sum(axis=1).any() <= 0:
        #     print(distance_mat)
        pca = PCA(n_components=1)

        #pc1 = pca.fit_transform(distance_mat_std.transpose())
        pc1 = pca.fit_transform(distance_mat.transpose())

        # print("explained variance ratio", pca.explained_variance_ratio_)
        # print("var", pca.explained_variance_)

        #pca_df = pd.DataFrame(data=pc1, columns=['pc1'])
        #pc1 = PCA().fit(distance_mat).components_[0]

        # recursive calls
        t = random.uniform(min(pc1), max(pc1))
        left_pc = [i for i in range(len(pc1)) if pc1[i][0] < t]
        right_pc = [i for i in range(len(pc1)) if pc1[i][0] > t]
        X_left = X.iloc[:, left_pc]
        X_right = X.iloc[:, right_pc]
        left = omri_tree(X_left, OTUs, e+1, l, psi, distance_matrix, random_state + 1)
        right = omri_tree(X_right, OTUs, e+1, l, psi, distance_matrix, random_state + 1)

        return Tree_Node(depth=e, left=left, right=right, split_att=pc1, split_val=t, size=len(sampled_X.columns), samples=X.columns)


def average_depth(sample, OF):
    d = 0
    for tree in OF.trees:
        position = tree_position(sample, tree)
        d += position.depth
    d /= OF.number_of_trees
    return d


def tree_position(sample, tree):
    node = tree
    position = tree
    while node:
        if sample in node.samples:
            if node.left and sample in node.left.samples:
                node = node.left
            elif node.right and sample in node.right.samples:
                node = node.right
            else:
                position = node
                break
        else: # should never reach here
            break
    return position


'''
    inputs: A= a group of anomaly samples (A in X), B= a group of normal samples (A in X), OF= omri forest
    function:
    output: True if anomalies has lower average depth than normal samples, otherwise False
'''
def test_groups_by_depths(A, B, OF):
    A_depths = []
    for anomaly in A:
        A_depths.append(average_depth(anomaly, OF))
    B_depths = []
    for normal_sample in B:
        B_depths.append(average_depth(normal_sample, OF))
    return A_depths, B_depths


def create_data(data):
    data, OTUs = filter_samples(data)
    data = relative_abundence(data)
    return data, OTUs


def filter_samples(data):
    filtered_data_with_OTUs = data.loc[:, data.sum() > 3000]
    filtered_data = filtered_data_with_OTUs.iloc[:, 1:]
    OTUs = filtered_data_with_OTUs.iloc[:, :1]
    return filtered_data, OTUs


def relative_abundence(data):
    final_data = data.copy()
    for colname in data.columns:
        if sum(data[colname]) > 0:
            final_data.loc[:, colname] = data[colname] / sum(data[colname])
    return final_data


def filter_features(data):
    data = data[data.mean(axis=1) > 0.005]
    return data


#print(omri_tree(X, OTUs, 0, 3, 10, "braycurtis").size)
#omri_tree(X, OTUs, 1, 3, 10, "weighted_unifrac")


def all_body_sites_except_of_feces(metadata):
    all_body_sites = metadata[metadata['body_site'] != 'UBERON:feces']['body_site'].drop_duplicates()
    return all_body_sites



def box_plot(data, labels, xlabel, title):
    all_data = np.array(data).T.tolist()
    df = pd.DataFrame(data=all_data, columns=labels)
    sns.boxplot(data=df, orient="h").set(xlabel=xlabel,title=title)
    plt.show()


#box_plot(isolation_forest_auc_list_1, all_body_sites,'AUC', 'AUC of Isolation Forest for 1% body site anomalies against feces samples')
#box_plot(isolation_forest_auc_list_5, all_body_sites,'AUC', 'AUC of Isolation Forest for 5% body site anomalies against feces samples')




def check_body_site_agains_feces(metadata, X, feces_data, body_site, outliers_ratio, psi, t):
    final_data = X
    # body site data - abnormal data
    all_body_site = metadata[metadata['body_site'] == body_site]['#SampleID']
    body_site = [sample for sample in all_body_site if sample in final_data.columns]
    body_site_data = final_data[body_site]
    sub_sample_size = int(outliers_ratio * len(feces_data.iloc[0]) / (1 - outliers_ratio))
    if len(body_site_data.iloc[0]) > sub_sample_size:
        indices = random.sample(range(0, len(body_site_data.iloc[0])), sub_sample_size)
        few_body_site_data = body_site_data.iloc[:, indices]
    else:
        sub_sample_size = len(body_site_data.iloc[0])
        few_body_site_data = body_site_data

    # Input data - normals & outliers data
    inputIF = pd.concat([feces_data, few_body_site_data], axis=1)

    log = len(inputIF.iloc[0])
    l = math.log(log, 2)
    print("depth limit", l)

    # Forest
    OF = Forest(0,[])
    OF.fit(inputIF, [], psi, l,t)

    # Test
    A_depths, B_depths = test_groups_by_depths(few_body_site_data, feces_data, OF)
    compare_depths = (sum(A_depths) / len(A_depths)) < (sum(B_depths) / len(B_depths))
    U1, p = mannwhitneyu(A_depths, B_depths, alternative="less")

    y_true = len(feces_data.iloc[0]) * [1] + sub_sample_size * [0]
    auc = roc_auc_score(y_true, B_depths + A_depths)

    model = IsolationForest(n_estimators=t)
    model.fit(inputIF.transpose())
    scores = model.decision_function(inputIF.transpose())  # higher score means more normal
    IF_auc = roc_auc_score(y_true, scores)

    return A_depths, B_depths, compare_depths, p, auc, IF_auc


def check_all_body_sites_agains_feces(X, metadata, all_body_sites, outliers_ratio, psi, t):
    A_depths = []
    B_depths = []
    compare_depths = []
    p_values = []
    auc = []
    IF_auc = []

    # feces data - normal data
    all_feces = metadata[metadata['body_site'] == 'UBERON:feces']['#SampleID']
    feces = [sample for sample in all_feces if sample in X.columns]
    feces_data = X[feces]  # 418 samples

    for body_site in all_body_sites:
        i = 0
        now_A = []
        now_B = []
        now_compare = []
        now_p = []
        now_auc = []
        now_IF_auc = []
        while i < 20:
            res = check_body_site_agains_feces(metadata, X, feces_data, body_site, outliers_ratio, psi, t)
            now_A.append(res[0])
            now_B.append(res[1])
            now_compare.append(res[2])
            now_p.append(res[3])
            now_auc.append(res[4])
            now_IF_auc.append(res[5])
            i += 1

        A_depths.append(now_A)
        B_depths.append(now_B)
        compare_depths.append(now_compare)
        p_values.append(now_p)
        auc.append(now_auc)
        IF_auc.append(now_IF_auc)

    return A_depths, B_depths, compare_depths, p_values, auc, IF_auc



# print(compare_depths)
# print(p_values)
# print(B_depths)
# print(A_depths)
# box_plot(A_depths, all_body_sites, 'Anomalies depths', 'Anomalies depths of body_site in Forest')
# box_plot(B_depths, all_body_sites, 'body site compared to feces', 'feces depths in Forest')




# 50 trees run:
# compare_depths = [True, True, True, True, True, False, False, True, True, True, True, True, True, True]
# p_values = [0.12635000229158508, 4.652218758260393e-18, 7.797977840673788e-05, 7.104067944018121e-22, 0.0022290369578106, 0.01366735977895233, 0.418723012675953, 2.5437205269862495e-10, 1.2451205374827454e-16, 0.5651560701599614, 2.8737520376134866e-14, 8.584149545237199e-10, 6.475239496783323e-16, 1.6100018027519093e-09]
# B_depths = [[15.24, 12.82, 7.24, 8.34, 15.88, 17.52, 8.5, 14.96, 10.18, 17.14, 17.9, 15.06, 12.02, 11.08, 14.7, 11.32, 12.06, 15.62, 14.26, 14.84, 11.06, 10.92, 8.24, 5.88, 7.0, 11.88, 9.64, 17.08, 13.72, 14.5, 16.28, 11.32, 10.92, 6.76, 7.86, 13.48, 16.38, 7.34, 18.66, 12.36, 17.5, 15.88, 16.72, 14.1, 12.7, 12.98, 11.32, 12.1, 12.36, 7.88, 7.0, 15.76, 9.22, 12.36, 8.34, 11.42, 13.54, 11.32, 12.06, 12.2, 15.62, 8.56, 12.48, 9.66, 16.7, 8.78, 16.78, 10.82, 16.48, 10.38, 11.18, 15.84, 18.74, 15.84, 16.5, 11.68, 9.06, 11.72, 10.12, 8.98, 13.7, 8.68, 13.38, 11.04, 11.56, 11.86, 17.52, 16.28, 13.78, 14.0, 10.86, 12.86, 13.5, 7.84, 12.86, 8.24, 13.32, 6.58, 9.04, 12.5, 10.38, 9.9, 10.28, 8.82, 15.5, 15.52, 15.18, 14.22, 13.84, 7.2, 11.18, 15.62, 6.12, 8.26, 9.38, 10.52, 11.12, 9.74, 12.58, 12.36, 9.76, 12.68, 12.04, 8.5, 8.48, 11.02, 14.06, 10.28, 7.38, 16.72, 11.74, 12.78, 12.12, 17.72, 9.14, 14.68, 10.18, 19.46, 19.18, 17.6, 6.62, 15.6, 17.98, 18.72, 15.7, 19.56, 18.76, 4.58, 16.24, 18.46, 9.1, 13.2, 16.72, 11.46, 8.46, 9.68, 18.14, 16.52, 17.0, 8.82, 12.54, 13.38, 16.94, 10.64, 15.56, 17.72, 16.84, 13.76, 13.1, 15.64, 18.68, 12.28, 16.96, 10.72, 17.48, 8.3, 11.56, 10.28, 15.74, 16.2, 11.1, 16.48, 17.34, 12.42, 17.06, 14.32, 18.52, 12.18, 9.22, 4.74, 18.98, 13.6, 9.14, 14.12, 18.16, 12.74, 13.72, 17.22, 12.76, 9.9, 15.16, 19.16, 9.12, 18.72, 18.68, 19.26, 14.66, 6.98, 14.22, 18.1, 13.18, 15.56, 17.28, 9.42, 17.62, 12.88, 6.44, 16.28, 15.48, 13.34, 7.22, 16.5, 11.18, 10.44, 14.52, 16.4, 18.72, 17.64, 7.48, 18.62, 8.66, 19.32, 16.6, 17.74, 9.36, 17.28, 11.98, 13.86, 7.98, 15.28, 15.16, 16.04, 15.98, 12.46, 11.84, 19.18, 17.94, 8.34, 17.24, 17.2, 6.96, 13.6, 14.72, 14.76, 5.46, 17.36, 19.2, 15.1, 19.24, 16.02, 19.58, 18.78, 9.42, 18.3, 14.68, 16.76, 13.56, 9.44, 16.8, 18.46, 20.0, 12.62, 18.98, 16.72, 14.24, 18.18, 19.04, 17.88, 16.88, 8.06, 8.68, 8.44, 18.5, 8.12, 6.1, 19.7, 9.16, 13.74, 16.54, 18.08, 19.18, 9.28, 10.98, 13.74, 14.0, 19.46, 9.66, 18.4, 18.44, 9.64, 18.36, 13.86, 8.84, 19.12, 15.52, 14.32, 17.7, 16.2, 11.22, 13.12, 10.3, 11.64, 12.04, 17.96, 18.06, 19.36, 14.94, 18.42, 17.56, 19.1, 7.84, 16.76, 11.54, 8.92, 16.92, 13.92, 16.12, 15.68, 16.94, 14.72, 18.82, 15.78, 9.06, 9.86, 17.46, 9.38, 16.12, 9.04, 18.36, 17.1, 8.14, 15.44, 18.72, 15.8, 17.94, 18.18, 17.22, 12.62, 17.74, 8.8, 13.62, 17.42, 18.56, 10.64, 11.54, 17.78, 18.56, 13.46, 11.9, 15.66, 14.08, 11.64, 18.1, 17.96, 10.9, 13.66, 8.3, 8.74, 15.54, 15.42, 10.78, 14.3, 8.02, 17.96, 14.14, 4.66, 18.36, 19.2, 14.5, 12.4, 6.8, 12.84, 15.24, 11.64, 17.18, 12.28, 17.48, 19.9, 17.1, 15.86, 13.44, 17.94, 19.32, 18.9, 18.62, 10.28, 6.62, 14.5, 13.08, 14.4, 17.04, 16.08, 14.72, 4.94, 13.46, 17.54, 10.26, 10.74, 17.4, 12.18, 19.18, 16.3, 19.36, 19.0, 12.16, 12.88, 14.32, 16.32], [16.7, 13.42, 6.94, 8.6, 16.3, 18.52, 8.06, 16.04, 11.3, 18.96, 17.92, 14.82, 13.08, 14.08, 16.92, 15.12, 14.7, 15.32, 15.48, 15.98, 10.78, 13.76, 8.8, 7.76, 9.36, 14.56, 9.8, 18.18, 14.3, 14.76, 17.5, 13.1, 12.46, 9.16, 7.62, 14.92, 18.12, 11.38, 19.26, 14.08, 18.06, 18.16, 17.1, 17.76, 17.04, 14.86, 13.22, 12.32, 12.44, 6.5, 10.4, 17.76, 6.96, 14.18, 8.66, 8.34, 17.28, 11.68, 12.5, 14.94, 16.46, 10.32, 14.66, 9.18, 18.04, 10.22, 17.98, 11.1, 17.0, 10.06, 12.7, 16.86, 18.76, 16.98, 17.6, 14.52, 9.76, 12.46, 10.86, 9.18, 14.4, 10.92, 15.18, 16.18, 11.58, 14.26, 18.68, 17.8, 15.6, 15.76, 12.78, 14.18, 12.14, 6.02, 15.56, 11.6, 15.28, 8.28, 9.44, 15.02, 14.42, 11.6, 11.48, 7.72, 17.74, 17.68, 16.06, 17.86, 15.16, 5.22, 10.98, 15.94, 8.2, 7.9, 9.32, 12.0, 16.24, 9.7, 14.28, 14.68, 9.92, 15.42, 13.6, 8.64, 7.68, 14.18, 16.58, 10.44, 8.66, 18.28, 13.22, 14.12, 16.18, 19.1, 11.94, 16.6, 10.52, 19.68, 18.36, 18.32, 7.2, 17.9, 18.7, 19.74, 15.74, 18.56, 18.74, 4.02, 12.58, 19.1, 13.48, 12.18, 17.92, 10.36, 9.96, 5.42, 18.2, 16.48, 17.4, 10.54, 9.12, 15.04, 18.36, 14.04, 15.24, 17.58, 18.3, 10.88, 15.3, 11.6, 19.08, 11.1, 16.66, 8.7, 19.14, 10.78, 10.58, 12.44, 16.02, 16.94, 7.58, 17.82, 17.34, 15.46, 17.46, 16.94, 17.86, 14.1, 10.1, 10.12, 18.9, 10.9, 12.62, 15.38, 16.68, 12.28, 15.1, 18.24, 14.62, 8.8, 12.7, 18.42, 11.14, 18.3, 19.34, 19.24, 15.36, 9.7, 15.28, 19.16, 10.34, 17.1, 16.68, 11.76, 18.74, 10.18, 12.0, 18.22, 15.32, 13.98, 14.9, 13.0, 12.44, 7.94, 15.44, 18.0, 19.34, 17.44, 9.1, 18.22, 10.96, 19.68, 17.16, 18.46, 10.52, 15.86, 13.18, 9.3, 9.28, 16.78, 16.8, 17.72, 15.44, 12.64, 12.12, 19.8, 19.36, 9.62, 17.7, 17.54, 8.84, 14.94, 16.8, 12.1, 9.98, 18.46, 19.4, 15.8, 19.76, 17.3, 19.74, 18.9, 6.22, 19.08, 14.66, 17.22, 9.32, 12.46, 17.62, 18.76, 19.94, 7.46, 18.76, 17.1, 16.18, 17.54, 18.6, 17.8, 17.82, 11.54, 7.32, 9.28, 18.88, 9.98, 9.58, 19.24, 10.96, 14.74, 17.64, 19.3, 19.32, 8.28, 12.2, 14.78, 12.26, 19.44, 8.96, 18.7, 18.32, 10.48, 18.72, 14.48, 17.26, 19.56, 16.88, 17.42, 16.88, 16.74, 12.98, 12.4, 11.0, 9.52, 15.62, 17.8, 18.2, 19.34, 15.32, 18.84, 19.3, 19.48, 9.38, 18.92, 13.24, 4.78, 17.16, 14.88, 17.2, 17.04, 17.1, 14.54, 19.2, 18.1, 6.42, 10.96, 18.14, 10.48, 15.76, 8.54, 19.58, 18.86, 8.78, 17.02, 17.96, 15.98, 18.5, 18.88, 18.5, 8.88, 18.96, 14.54, 15.88, 17.88, 19.66, 11.66, 11.64, 18.84, 18.84, 16.58, 13.5, 16.84, 15.18, 11.32, 18.06, 18.34, 12.74, 15.44, 8.92, 9.68, 16.06, 16.94, 8.2, 14.36, 9.5, 18.5, 14.62, 8.8, 18.42, 19.14, 15.76, 14.58, 9.38, 15.24, 17.64, 10.0, 18.18, 13.12, 17.88, 19.5, 16.64, 16.26, 16.26, 18.5, 19.68, 18.6, 18.86, 12.88, 11.44, 16.32, 13.24, 14.9, 18.86, 17.0, 14.68, 3.38, 14.62, 18.4, 10.46, 12.94, 17.48, 9.76, 19.0, 17.68, 19.6, 19.7, 10.56, 12.76, 17.18, 17.52], [14.64, 13.36, 6.96, 7.48, 14.38, 16.88, 8.7, 14.78, 10.7, 17.28, 16.94, 12.16, 11.58, 11.68, 14.42, 11.84, 11.9, 13.82, 14.04, 14.36, 9.14, 10.42, 7.86, 6.5, 7.78, 12.76, 8.14, 16.18, 12.84, 13.08, 15.22, 12.0, 8.96, 8.66, 5.42, 13.04, 16.16, 8.12, 17.92, 11.82, 17.42, 14.38, 14.64, 16.28, 12.18, 12.86, 11.32, 11.42, 12.52, 5.72, 7.46, 14.92, 7.52, 11.86, 7.36, 9.52, 15.32, 10.88, 12.14, 12.8, 13.8, 9.36, 12.18, 8.88, 15.52, 7.58, 15.38, 10.5, 16.44, 10.22, 11.38, 14.14, 18.06, 14.66, 16.34, 12.6, 9.24, 11.8, 9.48, 8.52, 12.92, 9.64, 12.98, 11.6, 9.02, 11.8, 16.96, 16.14, 13.82, 13.74, 11.86, 12.1, 11.18, 5.7, 14.64, 9.0, 11.44, 5.8, 8.24, 13.24, 11.02, 8.96, 9.48, 7.58, 15.38, 16.64, 15.22, 16.44, 12.88, 4.86, 10.42, 14.14, 6.9, 6.12, 9.14, 11.1, 11.8, 9.06, 11.94, 12.66, 9.32, 13.04, 11.58, 8.5, 7.66, 12.4, 14.88, 10.94, 7.84, 16.44, 11.9, 12.08, 13.84, 18.46, 9.7, 13.66, 9.4, 19.16, 18.94, 16.96, 4.94, 15.06, 18.42, 19.56, 15.08, 18.68, 18.68, 4.96, 15.64, 18.16, 9.34, 12.18, 14.7, 9.12, 8.16, 8.6, 18.42, 13.54, 17.04, 8.42, 13.48, 13.2, 16.84, 9.32, 13.86, 17.32, 16.94, 12.86, 13.02, 12.98, 17.92, 12.32, 17.54, 9.36, 18.7, 9.84, 11.34, 10.32, 15.9, 15.82, 8.34, 16.12, 16.16, 13.8, 18.02, 15.34, 17.9, 12.54, 8.52, 6.44, 18.64, 11.58, 8.04, 14.32, 17.78, 8.7, 14.08, 17.0, 13.3, 9.72, 14.3, 17.2, 8.86, 17.38, 18.16, 19.48, 14.98, 8.26, 14.6, 16.36, 12.3, 16.18, 14.66, 9.18, 17.0, 13.26, 6.76, 17.26, 14.5, 11.58, 10.12, 16.16, 11.7, 10.4, 14.36, 16.96, 18.38, 17.3, 8.12, 18.5, 8.7, 19.44, 16.18, 17.62, 9.34, 17.04, 13.5, 11.16, 8.04, 14.5, 16.4, 15.94, 14.86, 11.56, 11.62, 18.44, 18.02, 8.98, 16.68, 16.26, 5.3, 13.94, 14.48, 11.32, 7.28, 17.68, 19.82, 14.58, 19.26, 15.98, 19.26, 18.54, 8.16, 18.76, 15.8, 15.86, 12.56, 9.32, 17.58, 18.7, 19.74, 9.98, 19.34, 17.28, 15.64, 15.8, 18.46, 17.58, 15.26, 9.38, 8.22, 8.0, 19.2, 8.46, 7.4, 19.16, 6.94, 12.6, 17.12, 18.04, 18.5, 8.98, 9.48, 13.02, 13.9, 19.14, 6.42, 18.94, 17.72, 9.28, 18.46, 13.9, 16.02, 18.52, 15.02, 14.92, 17.28, 14.86, 12.18, 9.84, 9.72, 11.48, 12.88, 17.44, 17.5, 19.58, 14.86, 18.64, 17.68, 18.86, 6.2, 17.28, 11.94, 7.08, 15.46, 13.84, 14.72, 15.38, 16.2, 13.92, 18.96, 16.34, 8.6, 10.22, 15.8, 9.6, 14.62, 7.58, 18.76, 15.78, 7.88, 16.12, 17.28, 17.18, 17.84, 18.46, 17.44, 11.22, 17.8, 14.46, 11.5, 17.16, 18.14, 10.32, 9.78, 17.86, 18.66, 13.96, 12.38, 16.46, 13.52, 11.42, 17.04, 17.5, 11.28, 14.12, 8.04, 8.14, 14.16, 15.04, 10.72, 12.86, 8.56, 16.82, 15.0, 5.62, 18.54, 18.72, 15.3, 12.9, 5.42, 13.8, 15.98, 12.6, 18.44, 11.5, 16.48, 19.44, 16.12, 16.44, 13.68, 17.62, 19.14, 18.12, 17.32, 11.86, 7.12, 14.06, 11.54, 12.78, 17.78, 15.86, 10.92, 3.56, 13.4, 17.32, 9.32, 11.08, 17.74, 11.22, 19.34, 16.74, 19.2, 19.52, 11.6, 10.92, 14.88, 16.38], [16.34, 13.96, 7.04, 7.08, 15.24, 17.54, 8.0, 15.46, 12.04, 16.28, 18.36, 12.66, 12.44, 12.7, 15.4, 13.2, 12.68, 14.84, 15.02, 14.92, 9.54, 12.44, 8.1, 8.26, 8.8, 13.16, 7.86, 17.08, 13.66, 14.8, 16.86, 11.56, 11.44, 9.56, 6.2, 13.62, 17.54, 10.56, 17.4, 13.22, 17.26, 15.66, 15.92, 17.3, 15.16, 14.44, 11.58, 12.72, 11.88, 6.8, 9.1, 16.9, 7.38, 13.3, 7.0, 9.94, 16.06, 12.5, 12.38, 13.8, 15.28, 9.02, 12.44, 8.34, 17.7, 8.5, 17.46, 10.7, 17.88, 10.9, 11.82, 16.42, 18.6, 16.44, 17.92, 13.14, 9.26, 12.6, 10.94, 8.0, 13.7, 8.56, 14.22, 13.04, 10.38, 13.22, 16.38, 16.66, 15.26, 14.66, 12.22, 13.36, 11.2, 6.92, 14.12, 11.9, 13.88, 7.6, 10.18, 12.76, 13.7, 9.7, 9.34, 8.32, 16.4, 17.54, 15.24, 17.42, 14.16, 5.4, 9.58, 15.8, 8.18, 7.1, 10.04, 11.08, 13.18, 8.82, 12.54, 14.22, 9.44, 14.32, 13.5, 9.86, 8.46, 13.48, 15.72, 11.68, 8.72, 16.6, 13.04, 13.0, 15.18, 18.5, 9.38, 15.66, 10.32, 19.0, 18.9, 18.22, 7.96, 15.7, 18.96, 19.22, 15.22, 18.26, 18.68, 6.36, 14.88, 18.78, 13.02, 13.2, 16.88, 9.94, 10.0, 8.8, 18.72, 15.7, 16.64, 9.82, 11.6, 14.4, 17.32, 12.82, 15.48, 18.18, 17.08, 12.44, 14.7, 13.86, 18.7, 13.12, 16.78, 11.66, 17.8, 10.46, 10.54, 12.24, 16.56, 15.6, 10.94, 16.84, 15.9, 14.88, 16.84, 16.82, 18.28, 13.9, 10.26, 8.66, 18.14, 12.36, 10.98, 14.3, 16.5, 11.24, 14.3, 17.94, 14.0, 10.44, 14.46, 18.32, 11.02, 17.7, 18.88, 19.56, 15.44, 9.58, 15.6, 18.6, 12.66, 15.46, 17.6, 11.76, 18.32, 11.7, 11.1, 16.4, 14.86, 13.34, 13.54, 14.62, 11.52, 9.58, 14.36, 16.96, 18.88, 18.02, 9.38, 18.58, 10.24, 19.28, 16.58, 17.24, 11.08, 17.18, 12.12, 11.62, 9.2, 16.3, 17.66, 17.0, 15.14, 13.22, 12.28, 19.4, 18.0, 10.5, 17.22, 17.2, 9.96, 14.02, 16.26, 12.42, 9.44, 16.68, 19.24, 15.98, 19.34, 15.84, 19.18, 17.76, 8.86, 18.6, 14.36, 17.88, 12.72, 11.62, 16.6, 18.38, 19.36, 10.76, 18.72, 16.28, 17.32, 16.86, 18.28, 17.42, 16.8, 11.08, 8.76, 9.28, 19.1, 10.48, 9.96, 19.12, 11.5, 15.06, 17.26, 18.18, 18.86, 9.34, 10.72, 15.48, 13.46, 19.8, 10.3, 18.7, 17.54, 9.86, 18.9, 13.08, 1.98, 18.48, 14.6, 15.32, 17.38, 16.54, 12.24, 11.42, 9.68, 10.66, 13.82, 17.8, 18.12, 19.44, 13.04, 19.1, 17.26, 19.64, 9.0, 17.36, 12.68, 8.22, 15.9, 13.46, 16.48, 14.9, 16.74, 14.44, 18.6, 16.98, 8.68, 9.68, 17.44, 9.34, 14.66, 7.42, 18.1, 17.54, 8.1, 16.56, 17.4, 15.68, 17.98, 18.84, 16.94, 11.52, 17.72, 1.82, 13.62, 17.72, 18.24, 10.92, 10.1, 18.58, 18.24, 14.58, 13.92, 15.3, 15.38, 12.62, 18.16, 17.06, 11.26, 14.4, 8.42, 9.64, 14.48, 16.88, 9.92, 13.48, 9.3, 18.52, 15.44, 7.5, 18.48, 18.12, 16.34, 13.28, 9.6, 14.06, 16.82, 12.52, 17.88, 12.1, 16.72, 19.46, 15.56, 16.16, 14.28, 17.98, 19.42, 18.28, 17.98, 13.6, 11.44, 15.38, 12.92, 14.58, 17.18, 17.0, 14.54, 6.28, 14.36, 17.78, 9.8, 13.6, 17.66, 11.9, 19.48, 16.58, 19.02, 18.94, 11.44, 12.34, 15.14, 16.54], [14.88, 13.56, 6.14, 7.16, 14.3, 17.66, 7.0, 14.7, 10.12, 16.28, 17.4, 13.86, 12.2, 11.86, 14.4, 12.16, 11.84, 14.32, 13.98, 13.92, 9.56, 12.66, 7.52, 6.28, 7.92, 13.56, 8.02, 15.6, 13.0, 14.06, 14.7, 11.84, 10.74, 8.28, 5.12, 12.72, 16.64, 9.72, 18.54, 11.86, 17.6, 13.96, 15.2, 17.38, 13.56, 11.8, 10.66, 11.6, 11.32, 5.86, 8.5, 14.56, 6.14, 11.72, 7.3, 8.0, 16.0, 10.9, 12.4, 12.78, 15.02, 9.38, 12.14, 7.98, 16.54, 7.82, 16.18, 10.42, 16.3, 9.14, 10.74, 14.62, 18.54, 14.58, 15.42, 12.98, 9.24, 11.56, 9.6, 8.32, 12.5, 8.64, 13.4, 13.18, 10.4, 12.08, 16.6, 15.64, 13.18, 12.96, 11.22, 13.22, 11.4, 5.02, 13.5, 9.78, 12.76, 6.3, 8.34, 12.94, 12.16, 10.02, 9.68, 7.06, 15.44, 16.58, 15.34, 17.44, 12.36, 4.3, 8.94, 15.08, 7.36, 7.12, 8.82, 10.16, 13.02, 8.64, 12.56, 12.84, 9.0, 13.26, 12.48, 7.9, 6.96, 12.4, 13.4, 10.94, 7.78, 17.34, 11.92, 11.72, 15.98, 18.36, 9.48, 14.94, 8.98, 19.26, 18.88, 18.12, 6.42, 16.04, 18.42, 19.3, 15.34, 18.9, 19.22, 7.26, 15.62, 17.72, 13.42, 12.98, 15.86, 10.82, 4.96, 8.26, 17.44, 16.04, 16.58, 8.5, 12.2, 13.2, 17.38, 12.74, 12.06, 16.54, 16.7, 11.58, 10.22, 14.78, 17.3, 11.44, 16.92, 11.46, 17.94, 6.72, 11.2, 7.62, 14.26, 15.56, 10.1, 15.76, 14.54, 14.28, 16.7, 14.64, 16.7, 12.62, 9.0, 8.54, 18.38, 12.52, 10.22, 14.28, 17.76, 11.76, 13.34, 17.9, 10.72, 10.38, 15.56, 17.94, 5.64, 17.38, 18.92, 19.5, 10.9, 5.62, 12.28, 18.06, 12.7, 15.98, 16.72, 11.92, 15.7, 11.4, 11.2, 16.74, 15.9, 13.32, 11.9, 15.78, 11.28, 10.86, 13.18, 16.98, 17.9, 16.38, 10.14, 17.74, 9.04, 18.78, 16.42, 16.66, 6.14, 16.1, 13.34, 12.04, 3.5, 15.08, 16.64, 14.62, 15.28, 8.4, 9.56, 18.8, 17.88, 7.22, 17.12, 15.08, 8.48, 14.06, 15.78, 13.04, 6.48, 15.76, 19.38, 11.54, 19.26, 15.3, 19.2, 18.46, 7.94, 17.94, 15.08, 15.6, 12.66, 12.22, 17.0, 18.24, 19.44, 10.32, 18.1, 16.58, 16.38, 15.26, 16.82, 16.86, 16.06, 9.34, 3.04, 4.56, 18.44, 6.52, 8.24, 19.18, 9.48, 12.88, 16.78, 17.12, 18.22, 8.82, 10.2, 10.4, 12.94, 19.14, 8.04, 17.82, 17.76, 5.98, 17.3, 13.08, 14.74, 18.64, 16.14, 15.72, 15.96, 15.28, 11.7, 12.18, 9.88, 11.18, 10.76, 17.04, 17.6, 19.24, 14.3, 18.68, 17.56, 19.04, 7.96, 17.66, 8.28, 7.28, 16.68, 14.88, 15.32, 14.06, 15.52, 13.3, 18.24, 15.92, 8.46, 10.76, 16.9, 9.56, 14.52, 5.46, 18.38, 17.4, 3.12, 16.34, 17.36, 14.64, 17.34, 18.14, 17.06, 11.28, 18.36, 12.5, 12.36, 13.64, 16.62, 10.78, 10.92, 17.44, 17.92, 14.36, 10.24, 15.84, 13.76, 10.8, 17.04, 16.94, 11.9, 14.42, 3.34, 5.3, 13.72, 15.02, 10.66, 13.4, 5.16, 18.12, 12.68, 4.8, 17.96, 18.02, 12.42, 11.8, 8.3, 13.64, 16.74, 12.1, 17.62, 11.8, 15.62, 19.58, 16.56, 16.62, 14.36, 17.34, 18.82, 17.94, 18.12, 12.2, 10.78, 14.58, 13.56, 13.64, 16.24, 14.84, 14.24, 5.68, 12.16, 17.16, 9.1, 12.72, 17.24, 12.34, 19.52, 16.0, 19.04, 18.66, 11.74, 11.38, 14.92, 15.72], [14.88, 12.46, 7.08, 6.8, 14.46, 16.06, 8.9, 14.24, 10.78, 13.66, 17.68, 12.62, 12.62, 12.16, 14.82, 13.1, 11.7, 14.4, 15.0, 12.98, 8.86, 12.54, 7.82, 7.98, 8.36, 12.9, 7.28, 14.64, 13.1, 14.06, 15.48, 11.1, 9.44, 9.04, 6.72, 12.94, 16.98, 9.36, 17.9, 11.9, 16.54, 15.58, 14.96, 15.94, 13.42, 14.0, 11.4, 12.66, 11.64, 6.24, 9.6, 15.46, 8.58, 11.9, 7.08, 7.32, 14.62, 11.76, 12.58, 12.3, 13.64, 8.04, 12.08, 7.7, 16.14, 7.4, 15.96, 8.9, 16.74, 10.08, 9.94, 13.92, 17.78, 14.4, 16.88, 12.18, 7.98, 12.24, 10.24, 7.3, 13.42, 8.76, 14.04, 11.3, 8.88, 11.02, 13.66, 15.76, 13.42, 13.62, 11.52, 11.52, 9.88, 6.74, 13.82, 10.08, 12.5, 7.94, 9.06, 12.58, 13.14, 9.24, 9.26, 7.88, 15.02, 16.0, 15.88, 16.32, 12.52, 5.66, 8.1, 13.86, 8.06, 7.42, 9.44, 9.88, 11.62, 8.38, 12.24, 13.4, 7.92, 11.92, 11.34, 8.76, 8.32, 12.38, 14.1, 10.52, 8.6, 16.0, 11.88, 13.12, 14.82, 17.88, 9.52, 14.28, 8.74, 19.26, 18.76, 17.54, 5.72, 15.64, 18.48, 19.48, 15.0, 18.98, 18.88, 3.38, 15.44, 17.82, 9.82, 12.88, 17.04, 7.98, 9.28, 6.16, 17.92, 14.66, 17.5, 8.44, 10.28, 14.1, 16.58, 11.62, 13.96, 16.84, 16.44, 10.96, 13.06, 14.12, 18.76, 11.8, 16.76, 12.92, 16.9, 9.94, 11.8, 10.46, 15.26, 15.82, 9.58, 16.92, 16.22, 14.06, 17.34, 13.66, 18.58, 11.7, 9.18, 7.3, 18.54, 11.66, 9.58, 15.68, 17.92, 11.1, 12.96, 17.5, 12.68, 10.72, 13.66, 18.48, 9.12, 17.22, 18.16, 19.0, 14.06, 9.1, 13.92, 17.94, 11.86, 16.64, 17.1, 8.52, 17.46, 9.94, 10.44, 16.82, 15.08, 13.82, 12.02, 14.52, 11.52, 9.86, 13.78, 15.74, 18.34, 17.06, 7.62, 18.84, 9.24, 18.86, 16.1, 16.18, 8.86, 17.18, 9.66, 10.92, 7.44, 16.28, 16.86, 15.6, 15.34, 12.32, 10.68, 18.76, 18.28, 8.56, 16.34, 16.2, 7.52, 12.14, 15.02, 12.9, 7.56, 16.42, 19.26, 14.16, 19.62, 15.18, 19.48, 18.46, 7.92, 18.16, 15.54, 16.92, 10.48, 8.68, 16.54, 18.1, 19.7, 10.76, 18.52, 16.64, 15.86, 16.52, 18.34, 17.06, 17.2, 9.72, 8.1, 8.0, 19.0, 8.28, 8.52, 19.4, 9.06, 11.48, 17.82, 18.56, 19.0, 7.54, 10.7, 12.4, 11.72, 19.1, 9.2, 18.2, 18.54, 10.1, 18.56, 13.54, 15.08, 18.26, 15.74, 13.92, 16.66, 15.96, 11.26, 11.64, 9.08, 10.14, 13.52, 17.36, 16.54, 19.3, 14.22, 18.7, 16.76, 18.76, 7.7, 16.74, 11.94, 5.44, 16.44, 14.16, 16.62, 13.94, 16.42, 14.88, 19.24, 16.58, 8.0, 10.16, 15.34, 8.34, 14.6, 7.74, 17.86, 16.96, 8.2, 15.04, 18.52, 15.94, 17.44, 17.58, 16.94, 11.68, 17.42, 13.72, 12.32, 16.78, 18.18, 9.56, 10.02, 18.44, 16.66, 14.62, 12.14, 16.58, 14.6, 12.96, 17.84, 16.52, 10.14, 12.1, 8.52, 9.36, 14.26, 14.54, 10.04, 11.76, 8.22, 18.2, 14.14, 6.34, 17.96, 17.46, 14.82, 12.2, 7.36, 12.14, 15.82, 10.06, 17.6, 12.42, 17.04, 19.72, 16.78, 15.7, 14.32, 17.44, 18.9, 18.64, 18.06, 12.02, 10.12, 14.6, 12.4, 13.42, 17.98, 15.8, 14.5, 3.08, 12.02, 17.8, 8.74, 11.4, 16.92, 11.44, 19.02, 16.08, 18.96, 18.22, 9.32, 12.88, 13.98, 16.54], [15.42, 11.54, 5.04, 7.66, 14.2, 16.68, 6.46, 14.34, 10.7, 16.5, 17.7, 12.1, 11.36, 13.78, 14.46, 11.4, 11.84, 13.44, 14.4, 13.6, 9.04, 11.96, 6.66, 5.76, 6.74, 12.72, 8.26, 17.52, 12.02, 12.98, 15.14, 10.94, 8.98, 7.12, 5.28, 13.6, 16.8, 7.66, 18.08, 11.62, 17.72, 16.0, 15.22, 15.76, 14.34, 13.5, 10.2, 11.42, 12.46, 4.72, 7.62, 14.88, 6.74, 11.8, 7.48, 9.28, 15.64, 11.44, 11.4, 11.66, 13.94, 8.46, 12.1, 6.6, 16.32, 7.98, 16.36, 9.44, 16.68, 9.84, 9.72, 14.0, 18.24, 13.94, 16.42, 11.78, 8.0, 10.56, 9.5, 7.84, 13.18, 9.04, 12.54, 13.24, 10.0, 11.62, 16.42, 16.08, 13.7, 14.0, 9.14, 12.84, 10.76, 4.46, 12.12, 10.36, 12.04, 5.9, 7.42, 11.48, 12.44, 8.74, 9.7, 6.18, 15.52, 16.38, 15.16, 16.26, 13.74, 4.16, 9.42, 14.8, 7.3, 5.02, 7.58, 10.28, 13.44, 6.88, 9.74, 12.88, 7.78, 12.64, 11.46, 7.78, 6.18, 12.12, 15.14, 9.12, 7.36, 16.3, 10.78, 12.46, 15.02, 17.6, 9.5, 12.6, 7.92, 18.98, 19.14, 17.04, 6.78, 15.08, 18.22, 19.36, 13.92, 18.98, 18.7, 7.88, 15.96, 18.24, 12.38, 12.74, 16.58, 11.08, 9.0, 9.42, 17.6, 15.36, 17.32, 3.68, 12.76, 12.7, 16.4, 11.68, 13.7, 17.32, 15.76, 9.36, 12.78, 14.4, 18.16, 9.9, 16.98, 12.34, 12.92, 9.14, 11.16, 9.78, 14.62, 15.3, 10.24, 16.88, 16.24, 14.76, 16.86, 15.4, 17.84, 12.92, 8.88, 5.56, 17.9, 12.28, 6.2, 13.52, 17.82, 11.66, 13.02, 16.76, 13.4, 10.22, 15.02, 18.22, 9.16, 16.78, 18.8, 18.6, 13.76, 8.8, 14.18, 17.8, 11.6, 15.68, 17.02, 10.48, 17.72, 11.48, 11.1, 16.98, 15.74, 12.06, 12.9, 15.08, 10.74, 10.04, 14.66, 16.34, 18.52, 17.34, 10.2, 18.74, 8.46, 19.64, 15.9, 16.92, 7.76, 15.08, 12.04, 12.56, 8.14, 15.12, 15.76, 16.74, 14.82, 12.74, 9.86, 19.02, 18.36, 8.76, 16.74, 16.46, 8.64, 14.3, 15.02, 13.42, 4.96, 16.48, 19.22, 14.06, 19.06, 13.78, 19.46, 17.78, 9.22, 18.44, 15.26, 15.04, 12.8, 10.32, 16.44, 16.96, 19.74, 11.68, 17.26, 16.16, 15.22, 17.52, 17.82, 17.44, 16.92, 7.18, 9.8, 7.24, 18.46, 8.08, 5.22, 19.28, 10.12, 12.04, 16.64, 19.16, 17.94, 6.16, 4.8, 12.82, 13.94, 19.08, 8.3, 16.88, 17.96, 9.98, 17.84, 11.36, 14.02, 18.98, 15.52, 14.42, 16.14, 14.32, 8.34, 11.62, 9.5, 10.82, 13.5, 17.42, 17.26, 19.54, 15.94, 18.68, 17.8, 19.12, 5.26, 17.74, 12.78, 9.12, 17.78, 12.24, 15.24, 12.4, 16.58, 13.72, 18.62, 16.54, 8.84, 10.08, 17.3, 9.28, 13.62, 7.08, 19.0, 18.6, 9.04, 15.82, 18.0, 15.84, 18.26, 17.9, 17.46, 11.42, 17.34, 14.22, 13.8, 17.3, 18.82, 10.64, 10.8, 17.12, 17.74, 13.48, 13.28, 15.98, 14.32, 11.72, 16.34, 17.02, 11.98, 14.62, 8.68, 9.02, 14.02, 15.8, 9.86, 13.48, 7.64, 18.02, 10.06, 3.9, 18.14, 17.16, 15.94, 12.82, 8.64, 11.54, 15.7, 11.02, 17.14, 11.76, 17.0, 19.66, 16.78, 15.8, 13.42, 18.32, 19.7, 17.68, 17.74, 11.3, 10.82, 14.66, 12.32, 13.22, 17.7, 16.0, 14.78, 6.28, 6.58, 17.42, 8.92, 13.12, 16.42, 12.16, 18.68, 16.16, 19.2, 19.08, 12.16, 8.8, 14.46, 14.66], [16.24, 12.58, 6.74, 7.92, 13.92, 15.18, 8.3, 14.26, 10.92, 17.34, 18.3, 11.56, 11.74, 14.2, 13.78, 12.68, 13.26, 13.7, 15.74, 14.3, 8.92, 10.92, 9.24, 7.4, 7.96, 11.32, 8.1, 17.14, 13.52, 12.42, 17.18, 14.04, 10.98, 8.32, 5.72, 14.42, 17.18, 9.96, 18.1, 11.6, 18.06, 16.52, 16.16, 16.62, 15.04, 14.54, 11.18, 11.88, 13.4, 5.94, 8.26, 17.26, 8.16, 11.66, 7.7, 8.7, 16.98, 11.06, 11.76, 12.36, 14.96, 9.7, 13.54, 8.2, 17.72, 8.02, 17.5, 10.76, 17.44, 10.18, 11.62, 14.62, 18.7, 15.16, 17.24, 11.14, 9.64, 12.18, 9.36, 7.94, 12.36, 9.8, 12.0, 12.44, 10.48, 12.98, 17.48, 17.26, 13.78, 12.82, 11.94, 12.02, 10.58, 6.22, 13.76, 8.8, 13.32, 7.62, 9.06, 12.74, 12.9, 10.72, 10.62, 8.3, 15.48, 16.7, 15.74, 17.28, 13.38, 5.56, 7.8, 15.06, 8.42, 7.88, 9.0, 11.28, 12.46, 9.78, 12.56, 12.34, 9.66, 13.46, 13.26, 9.06, 7.58, 13.32, 14.8, 11.02, 8.32, 17.26, 12.56, 13.08, 15.44, 18.76, 11.4, 12.54, 9.44, 19.68, 19.06, 16.82, 7.9, 16.26, 19.1, 19.46, 15.54, 18.52, 18.68, 7.92, 15.66, 18.8, 12.86, 14.0, 17.46, 11.98, 5.38, 9.64, 18.24, 16.7, 17.36, 10.58, 12.2, 14.0, 17.66, 12.46, 13.28, 17.34, 17.1, 13.52, 12.34, 14.84, 18.5, 13.1, 16.98, 11.54, 18.56, 6.82, 11.8, 11.0, 15.48, 15.34, 10.96, 15.58, 14.92, 15.66, 17.42, 15.4, 18.4, 13.88, 8.56, 10.34, 17.74, 14.0, 10.3, 13.66, 17.88, 12.54, 15.22, 16.94, 11.42, 10.5, 14.96, 18.3, 7.3, 18.06, 18.56, 18.96, 13.54, 8.46, 16.2, 18.3, 12.86, 15.96, 18.06, 11.58, 17.56, 13.8, 11.22, 16.76, 15.82, 13.44, 13.02, 16.8, 12.74, 12.54, 13.88, 16.32, 18.28, 16.96, 9.76, 18.58, 9.44, 19.72, 17.1, 17.74, 9.82, 17.0, 13.5, 12.92, 5.98, 16.92, 16.98, 16.44, 15.0, 12.92, 10.1, 19.72, 17.9, 6.76, 17.02, 15.38, 9.94, 15.38, 15.34, 14.68, 6.08, 15.12, 19.54, 13.34, 19.44, 15.82, 19.72, 17.74, 8.3, 18.6, 16.5, 16.76, 12.52, 11.56, 17.76, 17.96, 19.72, 11.88, 18.9, 16.58, 16.16, 18.24, 18.54, 17.94, 17.52, 11.42, 4.08, 3.92, 18.98, 8.7, 10.54, 18.68, 11.52, 13.16, 16.74, 18.74, 19.1, 10.16, 10.92, 12.92, 14.56, 19.38, 10.22, 18.18, 17.6, 9.64, 18.36, 11.96, 15.26, 19.02, 16.08, 14.84, 17.04, 16.76, 11.94, 12.46, 9.16, 11.72, 12.98, 17.94, 18.04, 19.62, 14.98, 18.84, 17.68, 19.3, 8.5, 17.88, 11.44, 9.06, 16.46, 14.44, 15.82, 14.6, 14.26, 15.4, 19.42, 17.22, 8.6, 11.0, 17.44, 8.68, 15.2, 8.06, 18.76, 16.26, 4.98, 16.72, 18.54, 15.44, 17.56, 18.44, 17.64, 12.54, 18.32, 13.64, 13.32, 15.58, 18.34, 9.8, 10.62, 18.44, 18.58, 14.5, 11.54, 16.32, 14.18, 13.94, 17.4, 18.06, 11.98, 15.48, 4.78, 5.24, 14.02, 14.18, 12.44, 13.76, 4.7, 16.96, 14.02, 6.22, 18.22, 17.86, 15.0, 13.0, 9.8, 14.5, 16.14, 13.4, 17.74, 12.86, 15.14, 19.82, 15.84, 16.86, 14.42, 17.74, 19.8, 18.38, 17.52, 14.2, 10.94, 14.3, 14.24, 13.62, 17.46, 15.62, 15.0, 7.18, 13.26, 17.76, 9.52, 14.6, 17.36, 12.48, 19.42, 16.52, 19.36, 19.2, 12.48, 13.9, 14.96, 16.42], [16.36, 13.22, 6.62, 6.1, 14.98, 17.22, 7.14, 16.14, 9.54, 16.5, 18.44, 14.64, 12.9, 12.4, 15.34, 13.36, 13.34, 14.68, 16.4, 14.3, 8.02, 14.66, 3.82, 6.98, 6.32, 12.4, 4.16, 18.3, 10.48, 14.62, 16.34, 11.34, 12.84, 9.32, 7.18, 14.9, 16.42, 11.56, 19.52, 13.94, 18.68, 17.22, 16.18, 16.82, 15.28, 11.78, 9.24, 11.42, 12.0, 5.46, 9.1, 16.04, 9.76, 14.38, 5.8, 11.48, 17.5, 11.04, 12.46, 13.94, 13.3, 7.18, 13.28, 8.12, 17.44, 4.24, 17.32, 12.6, 17.3, 13.14, 11.22, 15.14, 18.9, 16.1, 17.48, 11.98, 10.7, 10.3, 8.36, 6.52, 14.18, 6.1, 13.86, 15.2, 9.36, 13.84, 16.74, 15.72, 12.98, 15.26, 9.38, 11.32, 12.96, 7.16, 15.92, 10.48, 13.98, 8.32, 9.46, 11.46, 14.88, 8.9, 6.44, 7.28, 17.66, 16.46, 15.78, 17.16, 13.86, 6.06, 11.86, 15.82, 8.44, 8.22, 10.08, 4.88, 15.24, 8.06, 8.82, 12.12, 10.68, 15.44, 8.08, 9.36, 8.54, 14.58, 16.18, 9.38, 8.58, 17.88, 11.3, 11.42, 14.76, 19.56, 9.6, 14.52, 8.78, 19.52, 19.3, 18.42, 6.72, 17.54, 19.1, 19.84, 16.94, 19.24, 18.12, 7.38, 16.78, 18.48, 12.64, 14.86, 17.26, 11.62, 10.52, 10.76, 19.32, 17.3, 17.84, 10.78, 13.74, 10.42, 17.34, 11.32, 17.62, 18.08, 17.84, 14.14, 15.16, 15.24, 18.66, 13.6, 17.84, 13.3, 18.28, 9.14, 11.42, 11.88, 15.78, 16.94, 11.78, 17.78, 17.32, 15.3, 18.6, 15.92, 17.92, 14.3, 9.64, 8.6, 18.94, 14.34, 11.1, 13.48, 18.54, 13.46, 13.86, 18.36, 15.22, 10.6, 15.82, 18.92, 12.36, 19.26, 19.3, 18.96, 15.68, 9.96, 15.38, 17.88, 13.26, 17.64, 18.16, 12.12, 18.62, 14.94, 11.36, 17.58, 17.34, 12.76, 14.76, 16.92, 14.26, 11.96, 15.5, 18.0, 18.96, 18.14, 9.78, 18.72, 11.76, 19.62, 17.8, 18.56, 6.24, 17.26, 14.86, 13.76, 10.94, 16.68, 17.36, 18.38, 17.68, 9.98, 11.52, 19.8, 19.0, 10.9, 16.68, 17.68, 8.52, 15.88, 17.22, 14.98, 9.42, 18.9, 19.48, 17.34, 19.36, 16.58, 19.52, 18.96, 8.5, 18.96, 17.84, 16.76, 13.7, 11.98, 18.32, 18.86, 19.52, 12.74, 18.9, 18.16, 16.88, 17.0, 19.34, 17.98, 17.54, 10.32, 10.94, 8.88, 19.26, 11.8, 8.42, 19.2, 10.5, 14.4, 17.34, 18.72, 19.5, 10.46, 11.44, 16.24, 15.76, 19.3, 10.02, 18.6, 19.12, 12.56, 18.96, 12.7, 17.08, 19.12, 17.04, 16.24, 18.22, 16.8, 6.2, 12.84, 10.18, 11.72, 14.86, 18.0, 18.32, 19.62, 16.44, 18.92, 18.66, 19.48, 9.52, 18.36, 12.98, 9.4, 16.9, 15.02, 15.84, 17.8, 18.48, 15.52, 19.2, 16.34, 8.42, 11.52, 17.88, 10.1, 16.8, 9.4, 19.32, 18.7, 8.12, 18.3, 18.5, 17.04, 19.62, 18.92, 19.42, 12.6, 18.22, 17.2, 14.86, 17.6, 19.02, 9.8, 11.32, 18.1, 19.18, 15.3, 13.62, 17.64, 14.82, 13.74, 18.04, 19.02, 10.94, 15.64, 8.7, 10.74, 15.42, 17.36, 11.84, 14.2, 10.24, 19.1, 13.56, 7.18, 19.14, 18.64, 14.66, 13.5, 8.96, 13.84, 16.1, 13.44, 18.68, 11.9, 16.76, 19.74, 18.16, 17.32, 15.36, 19.54, 19.74, 18.36, 18.02, 13.16, 10.76, 15.18, 14.3, 13.58, 18.76, 15.64, 16.62, 6.64, 13.96, 18.04, 8.14, 14.18, 15.98, 12.54, 19.66, 16.56, 19.76, 19.2, 13.04, 13.32, 15.92, 17.32], [13.78, 10.84, 5.86, 7.98, 13.08, 17.28, 7.48, 14.86, 8.88, 16.96, 18.08, 11.56, 10.94, 12.58, 14.88, 13.08, 9.44, 12.44, 14.94, 12.3, 8.44, 10.5, 6.9, 6.32, 6.96, 10.8, 8.6, 16.24, 11.26, 12.8, 16.76, 12.52, 11.08, 8.0, 5.62, 13.72, 16.18, 7.44, 18.32, 11.62, 18.82, 15.84, 16.38, 16.76, 13.22, 13.3, 10.76, 11.52, 11.0, 6.0, 8.22, 16.6, 6.86, 11.64, 8.0, 9.48, 15.14, 10.78, 11.06, 13.18, 15.2, 9.3, 10.1, 7.32, 14.78, 8.28, 15.04, 7.7, 16.94, 8.44, 10.3, 15.88, 18.76, 15.98, 16.64, 10.52, 6.22, 10.12, 10.82, 8.44, 10.62, 6.68, 13.68, 12.96, 9.94, 11.54, 16.86, 15.16, 14.76, 14.56, 9.32, 10.86, 10.64, 5.38, 13.76, 9.32, 10.76, 6.36, 8.44, 11.88, 12.1, 9.18, 10.38, 6.54, 14.9, 15.58, 16.4, 16.82, 12.64, 5.62, 9.2, 13.82, 6.78, 7.06, 8.16, 9.76, 12.56, 7.56, 12.48, 9.88, 6.66, 12.38, 13.4, 6.82, 6.54, 11.46, 13.38, 9.4, 5.36, 17.08, 11.24, 12.58, 14.62, 18.22, 5.38, 12.96, 7.38, 19.3, 19.58, 18.7, 5.6, 16.56, 17.14, 19.38, 16.3, 18.6, 18.54, 7.98, 15.84, 18.54, 12.36, 12.28, 17.46, 12.22, 9.1, 8.74, 18.62, 16.18, 17.02, 9.66, 10.98, 13.06, 16.92, 6.8, 14.28, 16.72, 16.46, 12.28, 10.34, 14.46, 18.86, 11.7, 17.42, 11.62, 17.92, 7.42, 8.74, 10.2, 14.08, 15.74, 10.36, 16.92, 16.9, 13.94, 16.52, 14.96, 17.46, 12.76, 8.78, 8.5, 18.28, 13.3, 10.0, 13.5, 18.68, 12.36, 12.96, 18.7, 13.9, 9.36, 15.36, 18.1, 9.08, 17.76, 18.84, 19.18, 13.64, 6.72, 13.26, 17.6, 11.66, 16.24, 16.9, 10.74, 17.5, 12.26, 12.08, 16.72, 14.38, 8.6, 13.58, 17.2, 12.28, 10.12, 14.9, 15.54, 18.9, 17.2, 7.66, 17.98, 10.62, 19.16, 16.7, 17.36, 8.64, 14.52, 12.94, 12.36, 8.14, 11.84, 16.68, 16.48, 16.34, 11.6, 11.22, 19.02, 18.56, 8.38, 16.68, 16.9, 9.52, 14.2, 16.1, 14.06, 8.76, 16.74, 18.46, 15.06, 19.7, 14.84, 19.28, 18.54, 5.88, 18.04, 15.66, 14.8, 11.04, 10.66, 18.24, 18.44, 19.38, 11.08, 18.12, 16.42, 16.62, 16.94, 18.32, 16.48, 17.76, 9.58, 7.76, 3.86, 19.26, 7.9, 8.4, 19.56, 9.42, 11.98, 16.72, 18.1, 19.28, 9.38, 11.14, 13.3, 13.66, 19.7, 7.7, 17.78, 18.1, 10.52, 18.08, 13.5, 15.0, 18.54, 16.42, 14.82, 17.22, 16.44, 12.22, 12.46, 10.04, 10.36, 13.36, 16.48, 18.92, 19.28, 15.2, 19.24, 17.96, 18.82, 9.66, 17.98, 12.7, 7.9, 17.28, 13.7, 15.22, 15.8, 16.92, 15.32, 17.94, 16.9, 5.76, 10.48, 16.8, 9.58, 16.38, 8.3, 19.04, 18.64, 8.14, 16.56, 18.22, 15.16, 18.12, 18.4, 17.22, 9.84, 17.86, 14.08, 13.04, 16.76, 18.2, 10.26, 11.9, 16.78, 17.8, 14.98, 11.16, 16.44, 14.68, 11.44, 17.74, 17.5, 11.2, 14.28, 8.3, 8.82, 13.52, 15.36, 10.72, 13.22, 6.7, 18.02, 13.08, 7.42, 17.88, 17.74, 14.42, 12.88, 9.56, 12.34, 16.88, 11.88, 16.62, 13.36, 17.36, 19.74, 16.6, 17.56, 14.54, 18.1, 19.06, 18.96, 18.06, 13.34, 10.22, 13.62, 12.0, 13.02, 17.86, 15.96, 15.7, 5.96, 11.56, 17.54, 8.86, 13.68, 15.76, 9.38, 19.0, 16.44, 19.1, 18.44, 11.58, 11.64, 14.76, 16.96], [16.1, 13.36, 7.48, 6.72, 14.54, 17.92, 8.48, 15.04, 11.14, 16.62, 18.44, 13.68, 13.06, 12.2, 14.86, 12.8, 12.54, 14.16, 15.24, 13.36, 8.24, 12.24, 7.3, 7.68, 8.3, 13.7, 5.5, 17.22, 13.28, 14.62, 15.82, 10.22, 11.24, 8.48, 6.6, 14.08, 16.16, 11.02, 18.64, 12.88, 18.04, 16.08, 15.68, 17.1, 15.42, 13.74, 12.2, 10.5, 11.7, 6.6, 8.74, 15.76, 8.8, 13.1, 6.66, 8.8, 17.08, 10.36, 12.44, 13.0, 14.26, 6.26, 13.0, 8.62, 17.2, 6.18, 17.2, 10.62, 17.5, 10.14, 11.88, 14.48, 18.44, 14.68, 14.32, 12.84, 8.84, 12.34, 9.76, 7.7, 13.72, 9.66, 12.02, 14.84, 8.28, 13.94, 16.46, 15.72, 13.62, 14.0, 11.64, 13.14, 9.72, 7.4, 14.84, 10.96, 12.66, 8.36, 9.74, 13.32, 13.9, 8.48, 8.8, 8.26, 16.6, 17.06, 15.28, 16.82, 12.56, 5.86, 9.42, 15.78, 8.56, 6.92, 10.18, 8.92, 14.98, 8.74, 11.68, 12.72, 8.7, 13.26, 10.18, 9.24, 8.0, 14.0, 14.52, 10.06, 8.82, 16.9, 12.66, 12.26, 15.62, 18.68, 10.4, 14.54, 9.66, 19.46, 19.14, 18.52, 6.42, 15.0, 18.72, 19.72, 14.16, 18.6, 18.48, 8.26, 16.34, 18.18, 13.6, 13.46, 16.2, 9.54, 7.86, 9.04, 18.58, 14.0, 16.52, 10.3, 11.52, 11.02, 16.78, 11.28, 13.98, 17.7, 17.0, 12.82, 12.44, 15.36, 18.82, 12.84, 16.86, 11.4, 18.0, 9.9, 11.48, 10.5, 14.74, 15.66, 8.82, 17.26, 16.0, 15.82, 16.64, 16.48, 17.3, 13.46, 9.64, 9.54, 18.38, 12.64, 10.68, 13.04, 18.22, 10.76, 14.54, 18.44, 15.08, 9.76, 14.28, 18.14, 7.68, 17.98, 18.04, 19.58, 14.7, 7.86, 15.64, 17.98, 12.82, 16.28, 17.46, 11.1, 17.88, 13.16, 12.06, 16.46, 15.26, 11.5, 11.66, 15.04, 11.84, 10.14, 13.72, 16.72, 18.34, 17.44, 9.1, 18.06, 10.06, 19.6, 15.06, 17.38, 11.5, 17.02, 12.72, 12.02, 5.48, 15.8, 18.4, 15.84, 15.36, 13.9, 12.14, 19.08, 17.18, 7.54, 16.82, 16.08, 8.16, 14.14, 16.92, 12.28, 7.82, 16.0, 18.96, 14.54, 19.42, 13.88, 19.46, 18.44, 8.18, 17.98, 14.34, 17.14, 11.26, 11.28, 17.92, 17.7, 19.5, 11.46, 18.08, 15.92, 15.84, 17.12, 18.2, 17.02, 16.52, 10.26, 5.22, 5.62, 18.46, 7.44, 8.26, 18.68, 11.04, 14.68, 16.52, 18.32, 18.92, 8.62, 11.48, 12.2, 14.28, 19.62, 8.22, 17.86, 18.48, 7.66, 18.12, 12.12, 15.46, 18.32, 14.22, 14.74, 17.32, 15.8, 10.18, 10.42, 9.04, 10.1, 14.34, 16.8, 18.02, 19.64, 13.98, 18.14, 17.46, 18.92, 8.46, 17.84, 14.62, 8.58, 14.26, 12.6, 15.56, 14.46, 15.86, 13.68, 18.94, 17.88, 8.28, 10.3, 16.14, 8.52, 15.04, 8.9, 18.8, 17.92, 7.68, 16.46, 17.38, 15.9, 17.12, 18.56, 17.68, 12.02, 18.56, 13.92, 12.16, 17.42, 18.38, 8.68, 9.22, 16.32, 17.5, 15.48, 15.04, 16.56, 14.3, 13.36, 18.14, 17.66, 10.38, 14.5, 7.74, 8.26, 14.16, 16.1, 10.66, 12.7, 6.12, 17.88, 13.66, 7.82, 18.66, 18.3, 15.54, 13.18, 8.2, 12.38, 16.86, 12.78, 17.24, 11.46, 16.9, 19.74, 15.9, 16.84, 14.82, 17.12, 19.6, 17.7, 18.3, 13.08, 10.82, 15.24, 13.6, 12.84, 17.34, 16.88, 13.34, 6.58, 13.92, 17.74, 8.32, 13.04, 15.64, 12.86, 18.74, 16.7, 18.64, 19.36, 11.98, 12.0, 14.42, 15.72], [15.1, 13.12, 6.34, 7.84, 14.96, 18.28, 8.58, 14.32, 12.08, 17.3, 17.84, 12.12, 12.6, 14.48, 15.9, 13.86, 13.82, 14.28, 15.06, 14.8, 9.62, 12.8, 8.54, 7.32, 8.66, 13.56, 8.66, 17.08, 12.62, 14.94, 15.68, 12.0, 10.24, 8.94, 6.34, 14.08, 17.9, 9.98, 18.18, 13.36, 17.56, 15.44, 16.4, 17.56, 15.76, 14.38, 12.46, 12.72, 12.26, 6.46, 9.24, 15.6, 7.62, 13.62, 7.86, 8.62, 16.48, 11.62, 12.14, 14.44, 16.04, 9.44, 13.7, 8.62, 16.26, 8.52, 16.08, 9.8, 17.14, 10.0, 11.42, 15.36, 19.14, 15.46, 16.92, 13.16, 8.42, 12.14, 11.4, 8.62, 13.94, 10.34, 13.96, 13.88, 9.58, 11.6, 17.2, 17.06, 14.54, 14.1, 11.24, 14.04, 9.74, 6.1, 14.38, 10.92, 12.64, 7.34, 8.1, 14.3, 12.66, 10.12, 10.38, 7.64, 14.92, 17.46, 16.58, 18.44, 13.0, 5.46, 9.6, 15.08, 7.34, 7.34, 8.86, 10.86, 13.86, 8.7, 13.06, 13.06, 8.28, 13.52, 12.52, 8.66, 7.52, 14.26, 15.58, 9.9, 8.36, 17.76, 12.38, 13.3, 14.98, 18.56, 11.06, 15.24, 9.2, 19.46, 19.38, 17.96, 6.9, 16.28, 18.56, 19.32, 16.56, 19.38, 19.02, 8.14, 17.24, 18.8, 11.66, 14.04, 16.36, 10.86, 5.42, 9.56, 19.04, 15.66, 17.02, 9.54, 12.72, 14.3, 16.46, 12.06, 10.88, 17.14, 16.7, 13.64, 11.74, 16.0, 18.3, 13.88, 17.42, 12.98, 17.24, 5.52, 12.82, 9.74, 14.84, 16.02, 10.94, 16.18, 16.64, 15.12, 17.34, 13.56, 18.06, 12.88, 8.9, 8.28, 18.62, 12.16, 9.2, 14.2, 18.76, 11.02, 13.76, 18.3, 11.62, 10.5, 15.46, 17.94, 6.1, 18.08, 18.32, 19.54, 11.22, 6.92, 14.94, 19.14, 13.4, 16.38, 16.26, 11.72, 17.06, 12.7, 10.9, 16.7, 15.94, 12.64, 11.18, 16.82, 11.92, 10.26, 15.5, 17.1, 18.9, 17.14, 10.54, 17.54, 10.38, 19.42, 15.88, 18.14, 8.12, 17.4, 13.26, 12.38, 3.64, 16.1, 18.36, 15.76, 16.22, 11.42, 9.1, 19.26, 17.56, 6.22, 16.9, 14.16, 9.42, 15.88, 15.14, 13.78, 8.34, 16.42, 19.84, 11.38, 19.8, 15.28, 19.54, 18.46, 8.52, 18.7, 15.7, 16.26, 13.96, 11.64, 18.06, 18.1, 19.7, 11.78, 18.54, 16.64, 16.98, 16.64, 15.62, 17.44, 16.64, 10.0, 3.0, 3.36, 19.16, 6.76, 9.34, 19.38, 9.14, 13.32, 16.4, 17.62, 19.26, 9.6, 11.36, 12.16, 14.34, 19.6, 10.0, 17.98, 18.44, 6.02, 18.18, 13.8, 15.5, 18.4, 16.36, 14.78, 18.0, 16.38, 9.9, 11.48, 9.84, 11.78, 13.08, 17.62, 17.72, 19.42, 16.3, 19.26, 17.9, 19.58, 8.02, 18.0, 10.34, 8.48, 16.98, 13.96, 16.16, 16.26, 13.54, 14.84, 18.46, 16.66, 8.74, 9.94, 16.54, 9.34, 15.08, 7.36, 18.72, 17.76, 4.22, 17.44, 18.42, 17.86, 18.16, 18.14, 17.46, 11.88, 18.12, 14.48, 14.6, 15.0, 18.3, 10.66, 11.52, 18.08, 17.58, 15.32, 12.78, 16.88, 14.72, 13.0, 18.1, 18.1, 12.1, 15.92, 4.32, 5.44, 16.58, 15.7, 10.58, 14.44, 5.86, 18.38, 12.8, 6.78, 19.1, 18.56, 14.36, 13.58, 9.42, 12.34, 16.74, 13.62, 17.88, 12.34, 17.26, 19.26, 17.56, 16.74, 14.86, 18.16, 19.4, 19.36, 17.4, 13.32, 10.62, 15.52, 13.72, 13.42, 17.56, 15.78, 14.18, 6.02, 12.4, 17.5, 9.34, 13.56, 17.38, 12.5, 18.22, 15.9, 19.04, 19.04, 12.74, 12.7, 14.34, 17.28], [17.36, 11.98, 4.92, 7.82, 13.54, 17.86, 7.28, 15.26, 11.36, 18.76, 18.68, 14.3, 13.0, 13.16, 14.96, 12.68, 11.26, 12.9, 17.28, 14.28, 10.44, 12.7, 7.1, 7.1, 7.98, 13.04, 8.92, 19.06, 10.12, 14.18, 17.28, 13.42, 13.86, 8.16, 4.1, 15.34, 16.14, 10.26, 19.64, 14.12, 18.78, 18.22, 16.12, 17.78, 14.8, 15.72, 10.14, 11.06, 13.22, 4.44, 9.44, 16.8, 8.68, 14.06, 7.78, 9.0, 17.56, 11.32, 12.88, 13.02, 15.52, 11.12, 11.82, 6.82, 18.18, 8.96, 18.32, 12.7, 18.54, 12.54, 8.56, 16.92, 19.1, 16.92, 17.66, 12.96, 10.84, 10.64, 11.16, 8.68, 14.78, 6.8, 13.32, 15.08, 10.48, 14.88, 18.84, 16.06, 15.08, 15.14, 9.04, 13.48, 11.82, 5.02, 15.66, 12.34, 15.5, 6.46, 7.5, 14.88, 14.14, 10.78, 11.08, 7.06, 16.66, 18.18, 15.64, 17.98, 14.02, 2.9, 11.06, 14.88, 6.74, 7.92, 7.5, 9.88, 15.26, 7.04, 9.12, 14.66, 10.34, 14.42, 12.02, 9.4, 6.02, 12.86, 15.2, 11.08, 8.6, 17.38, 10.54, 14.3, 15.7, 19.12, 11.42, 14.26, 7.36, 19.88, 19.94, 18.76, 8.16, 16.9, 19.2, 19.86, 17.06, 19.6, 18.78, 7.8, 16.38, 18.36, 14.2, 14.54, 18.26, 12.12, 10.56, 9.22, 19.66, 17.28, 19.08, 10.98, 12.84, 14.92, 18.78, 13.96, 15.48, 18.68, 18.3, 12.74, 14.78, 15.98, 19.08, 13.12, 18.74, 13.68, 18.66, 10.78, 12.52, 12.92, 16.46, 16.62, 11.6, 17.4, 16.68, 16.36, 18.76, 16.38, 18.72, 15.22, 8.74, 10.12, 19.68, 14.38, 11.56, 16.88, 18.36, 13.92, 16.16, 18.76, 15.44, 10.94, 15.62, 19.02, 11.38, 19.44, 19.26, 19.6, 14.86, 11.24, 15.74, 19.24, 13.66, 18.46, 19.04, 13.14, 19.02, 12.28, 13.78, 18.58, 17.38, 15.02, 13.46, 16.52, 14.62, 12.68, 16.52, 18.9, 19.16, 18.48, 10.1, 19.16, 11.26, 19.78, 17.92, 18.72, 11.0, 18.34, 16.0, 13.04, 10.08, 17.5, 18.24, 17.48, 17.74, 13.7, 13.28, 19.78, 19.4, 10.96, 18.62, 17.64, 11.64, 16.1, 16.76, 16.54, 10.26, 18.18, 19.94, 16.46, 19.54, 16.7, 19.88, 19.4, 9.64, 19.02, 17.58, 17.98, 13.38, 13.56, 18.98, 19.36, 19.92, 11.7, 19.38, 18.08, 17.76, 17.78, 19.16, 18.74, 18.64, 12.82, 9.38, 8.7, 19.48, 10.94, 8.3, 19.78, 12.86, 15.22, 18.04, 19.18, 19.9, 10.16, 12.56, 14.54, 14.38, 19.62, 10.06, 19.36, 19.34, 11.56, 19.46, 13.98, 17.7, 19.36, 17.88, 16.62, 18.34, 17.86, 14.28, 13.42, 9.08, 12.26, 14.86, 18.92, 19.02, 19.74, 16.16, 19.4, 19.2, 19.38, 9.98, 18.48, 14.46, 8.98, 16.24, 14.16, 17.26, 17.72, 17.58, 16.08, 19.64, 17.5, 9.68, 12.22, 18.04, 8.48, 16.36, 9.92, 19.56, 18.86, 8.82, 17.94, 19.58, 18.18, 18.94, 19.22, 19.02, 12.5, 18.94, 15.76, 15.04, 17.48, 19.0, 10.38, 12.3, 18.82, 19.0, 17.22, 14.98, 18.32, 16.12, 14.68, 18.7, 18.88, 14.2, 16.3, 9.08, 10.56, 16.8, 16.64, 13.28, 15.8, 8.44, 18.94, 15.42, 9.02, 19.7, 19.12, 16.4, 14.62, 11.7, 14.04, 18.28, 12.96, 19.0, 13.16, 17.82, 20.0, 18.18, 18.0, 17.08, 18.84, 19.78, 18.44, 17.88, 14.9, 12.68, 16.88, 14.22, 15.28, 18.68, 16.34, 17.08, 6.98, 14.56, 18.3, 10.06, 14.02, 16.88, 13.62, 19.72, 16.96, 19.5, 19.86, 12.7, 13.5, 16.76, 17.5], [14.7, 10.76, 5.3, 6.82, 13.84, 16.98, 8.0, 12.46, 9.62, 16.24, 18.58, 12.42, 10.84, 13.84, 14.96, 12.2, 11.54, 12.78, 14.54, 13.52, 8.42, 11.16, 5.92, 6.5, 8.28, 12.56, 7.38, 15.86, 11.58, 12.82, 15.94, 11.9, 9.68, 9.1, 3.82, 13.54, 15.82, 9.46, 17.74, 12.74, 17.14, 14.68, 15.68, 16.0, 14.22, 14.7, 10.22, 10.06, 12.0, 4.4, 9.24, 15.86, 6.82, 13.04, 6.72, 7.88, 16.64, 10.28, 11.24, 12.96, 15.34, 9.14, 11.42, 5.82, 16.18, 7.54, 16.32, 8.84, 18.06, 10.1, 7.98, 13.56, 17.9, 13.8, 16.4, 12.28, 7.84, 10.08, 9.88, 7.6, 12.6, 7.42, 12.16, 12.52, 9.94, 11.82, 16.12, 15.94, 14.3, 12.76, 9.72, 12.1, 9.02, 4.16, 12.78, 9.72, 12.38, 5.78, 6.44, 12.1, 12.96, 9.2, 9.9, 6.76, 15.4, 17.2, 15.2, 16.64, 13.82, 2.92, 8.42, 14.18, 6.72, 4.68, 7.8, 10.08, 12.8, 6.72, 12.6, 12.42, 7.78, 12.24, 12.82, 6.22, 5.96, 12.44, 14.46, 10.02, 6.52, 17.38, 9.72, 12.64, 15.1, 18.24, 9.2, 13.0, 7.42, 19.14, 19.26, 16.68, 7.04, 14.28, 17.94, 19.06, 14.66, 19.04, 18.72, 7.04, 15.88, 18.22, 11.3, 13.8, 16.3, 10.6, 8.04, 8.42, 18.3, 15.38, 16.4, 9.66, 11.46, 13.96, 15.86, 12.52, 13.96, 17.18, 15.74, 12.4, 11.48, 13.92, 18.54, 12.2, 16.22, 11.74, 17.12, 8.4, 10.96, 9.48, 14.9, 14.82, 10.12, 17.34, 15.8, 14.32, 17.22, 15.44, 18.16, 11.62, 8.42, 8.36, 18.8, 11.46, 9.08, 13.82, 17.32, 11.62, 13.0, 17.3, 12.98, 10.38, 14.66, 17.82, 9.82, 16.76, 18.76, 19.14, 13.76, 7.52, 12.88, 18.22, 12.06, 15.92, 16.72, 10.82, 17.72, 12.5, 10.3, 16.46, 14.68, 12.6, 11.9, 15.26, 10.56, 8.68, 13.4, 15.34, 19.4, 17.42, 9.58, 18.44, 9.72, 19.2, 16.06, 15.8, 8.74, 16.32, 12.34, 13.16, 7.1, 16.42, 16.26, 16.16, 15.1, 11.32, 11.5, 18.76, 18.48, 7.84, 15.68, 16.64, 7.6, 15.2, 15.04, 13.36, 7.66, 17.38, 19.74, 14.9, 19.64, 14.0, 19.28, 18.54, 7.66, 17.82, 15.46, 16.3, 11.82, 10.86, 17.1, 18.26, 19.68, 10.46, 18.02, 16.18, 16.32, 16.94, 17.1, 17.32, 16.24, 9.06, 6.6, 7.34, 18.22, 7.8, 8.52, 19.32, 10.66, 13.5, 16.56, 18.32, 18.12, 10.0, 10.88, 12.5, 13.2, 18.46, 9.32, 18.2, 18.24, 9.14, 18.38, 13.1, 14.6, 17.94, 15.76, 15.0, 16.52, 16.52, 11.34, 11.16, 9.02, 11.12, 12.74, 17.4, 17.26, 19.02, 14.38, 18.24, 17.54, 19.16, 8.48, 16.7, 12.46, 7.48, 16.76, 13.42, 15.2, 14.02, 16.66, 13.12, 17.92, 16.56, 7.98, 9.16, 16.12, 8.42, 14.4, 7.02, 18.28, 16.6, 6.68, 16.14, 17.54, 15.24, 17.84, 17.08, 17.06, 12.0, 17.6, 13.58, 13.16, 17.08, 18.62, 9.04, 10.26, 17.1, 17.94, 13.04, 12.64, 15.74, 13.02, 12.78, 16.84, 16.1, 11.12, 15.4, 6.82, 8.16, 14.9, 15.6, 9.0, 13.18, 7.7, 16.62, 13.62, 6.5, 18.8, 17.86, 15.48, 11.32, 7.94, 13.42, 14.56, 11.02, 17.42, 10.96, 16.62, 19.44, 16.94, 16.88, 13.1, 17.84, 19.16, 18.56, 18.12, 13.12, 9.4, 14.64, 14.14, 11.64, 17.54, 15.64, 15.2, 5.02, 12.74, 17.28, 7.92, 13.44, 16.7, 12.14, 18.42, 17.18, 19.04, 18.46, 11.42, 10.96, 14.66, 15.5]]


def box_plot_hue(auc, auc_IF, all_body_sites, title):
    df = pd.DataFrame()
    for i in range(len(all_body_sites)):
        auc_df = pd.DataFrame()
        auc_df["model"] = ["Omri Tree" for j in range(len(auc[i]))]
        auc_df["auc"] = auc[i]
        auc_df["body site"] = [all_body_sites[i] for j in range(len(auc[i]))]
        df = pd.concat([df, auc_df], ignore_index=True)

        auc_df = pd.DataFrame()
        auc_df["model"] = ["Isolation Forest" for j in range(len(auc_IF[i]))]
        auc_df["auc"] = auc_IF[i]
        auc_df["body site"] = [all_body_sites[i] for j in range(len(auc_IF[i]))]
        df = pd.concat([df, auc_df], ignore_index=True)
        print(df)
    sns.boxplot(data=df, x="auc", y="body site", hue="model").set(title=title)
    plt.axvline(x=0.5, color='g')
    plt.xlim(0,1)
    plt.savefig(title)
    plt.show()

#
# HMP_metadata = pd.read_csv("C:\Maya\CS\AnomalyDetectionMicrobiome\Human_Microbiome_Project_1_6_2017_metadata.tab",sep='\t')
# all_body_sites = all_body_sites_except_of_feces(HMP_metadata)
# all_body_sites = [site[7:] for site in all_body_sites]
# box_plot_hue(auc, auc_IF, all_body_sites, "30 times, 10 trees, 5% outliers, 1000 sub-sample, auc for model and Isolation Forest for each body site")


def start(metadata, X, all_body_sites, outliers_percentage=50, number_of_trees=10, psi=1000):
    outliers_ratio = outliers_percentage / 100
    A_depths, B_depths, compare_depths, p_values, auc, IF_auc = check_all_body_sites_agains_feces(X, metadata, all_body_sites, outliers_ratio, psi, number_of_trees)
    title_boxplot_depths = 'outliers and normals depths in forest of ' + str(number_of_trees) + ' trees,' + str(outliers_percentage) + '% of outliers, sub sampling of ' + str(psi) + ' features'
    file_name = str(number_of_trees) + ' trees,' + str(outliers_percentage) + '% of outliers, sub sampling of ' + str(psi) + ' features'
    write_list_of_lists_to_file(file_name, A_depths, "anomalies depths")
    write_list_of_lists_to_file(file_name, B_depths, "normal depths")
    write_list_of_lists_to_file(file_name, compare_depths, "compare depths")
    write_list_of_lists_to_file(file_name, p_values, "p values")
    write_list_of_lists_to_file(file_name, auc, "auc of depths, anomalies and normals")
    write_list_of_lists_to_file(file_name, IF_auc, "auc Isolation Forest")
    write_list_of_lists_to_file(file_name, all_body_sites, "all body sites")

    print(A_depths)
    print(B_depths)
    print(auc)
    print(IF_auc)
    #box_plot_hue(A_depths, B_depths, all_body_sites, title_boxplot_depths)

def write_list_to_file(file_name, lst, title):

    with open(file_name + ".txt", "a") as outfile:
        outfile.write(title + "\n")
        outfile.write("[")
        outfile.write("".join(str(item) + ", " for item in lst))
        outfile.write("]\n")
    outfile.close()

def write_list_of_lists_to_file(file_name, lst, title):
    with open(file_name + ".txt", "a") as outfile:
        outfile.write(title + "\n")
        outfile.write("[")
        n = len(lst)
        for i in range(n):
            outfile.write("[")
            to_write = ""
            for j in range(len(lst[i])):
                to_write += str(lst[i][j])
                if j != len(lst[i]) - 1:
                    to_write += ", "
            outfile.write(to_write)
            if i == n-1:
                outfile.write("]")
            else:
                outfile.write("],")
        outfile.write("]\n")
    outfile.close()


# HMP_data = pd.read_csv("C:\Maya\CS\AnomalyDetectionMicrobiome\Human_Microbiome_Project_1_6_2017_data.tab",sep='\t')
# HMP_metadata = pd.read_csv("C:\Maya\CS\AnomalyDetectionMicrobiome\Human_Microbiome_Project_1_6_2017_metadata.tab",sep='\t')
# HMP_data, OTUs = create_data(HMP_data)
# all_body_sites = all_body_sites_except_of_feces(HMP_metadata)
# outliers_percentage=5
# number_of_trees=10
# psi=1000
#
# start(HMP_metadata, HMP_data, all_body_sites, outliers_percentage=outliers_percentage, number_of_trees=number_of_trees, psi=psi)
#

#
# df_auc = pd.DataFrame({"auc": auc, "body site": all_body_sites, "model": "OmriTree"})
# df_IF_auc = pd.DataFrame({"auc": IF_auc, "body site": all_body_sites, "model": "Isolation Forest"})
# df = pd.concat([df_auc, df_IF_auc])
# sns.barplot(data=df, x="auc", y="body site", hue="model", orient='h')
# plt.xlabel("body site")
# plt.ylabel("AUC")
# plt.title("AUC obtained by OmriTree and by Isloation Forest - " + str(number_of_trees) + " trees " + str(outliers_percentage) + "% outliers " + str(psi) + " sub-sampling size")
# plt.xlim(0,1)
# plt.show()




#
# all_body_sites = [site[7:] for site in all_body_sites]
# #
#df_50 = pd.DataFrame({"auc": auc_50, "body site": all_body_sites, "number of trees": 50})
# df_10 = df = pd.DataFrame({"auc": auc_10, "body site": all_body_sites, "number of trees": 10})
# df_1 = df = pd.DataFrame({"auc": auc_1, "body site": all_body_sites, "number of trees": 1})

# df_10_10 = df = pd.DataFrame({"auc": auc_10, "body site": all_body_sites, "% outliers": 10})
# df_10_15 = df = pd.DataFrame({"auc": auc_10_15, "body site": all_body_sites, "% outliers": 15})
# #df = pd.concat([df_1,df_10])
# df = pd.concat([df_10_10, df_10_15])
# sns.barplot(data=df, x="auc", y="body site", hue="% outliers", orient='h')
# # # plt.bar(auc, all_body_sites, width=0.2, orient="h")
# plt.xlabel("body site")
# plt.ylabel("AUC")
# plt.title("AUC for the depths obtained for each body site by the algorithm - 10 trees, 1000 sub-sampling size")
# plt.xlim(0,1)
# plt.show()

# df_depth_50 = df = pd.DataFrame({"auc": depth_50, "body site": all_body_sites, "% outliers": 50})
# df_depth_15 = df = pd.DataFrame({"auc": depth_15, "body site": all_body_sites, "% outliers": 10})
#df = pd.concat([df_1,df_10])
#df = pd.concat([df_depth_50, df_depth_15])
#sns.boxplot(data=df, x="auc", y="body site", hue="% outliers")
# # plt.bar(auc, all_body_sites, width=0.2, orient="h")
# plt.xlabel("body site")
# plt.ylabel("AUC")
# plt.title("AUC for the depths obtained for each body site by the algorithm - 10 trees, 1000 sub-sampling size")



# depth_df = pd.DataFrame()
# for i in range(len(all_body_sites)):
#     body_site_depth_df = pd.DataFrame()
#     body_site_depth_df["percentage"] = [50 for j in range(len(depth_50[i]))]
#     body_site_depth_df["depth"] = depth_50[i]
#     body_site_depth_df["body site"] = [all_body_sites[i] for j in range(len(depth_50[i]))]
#     depth_df = pd.concat([depth_df, body_site_depth_df], ignore_index=True)
#
#     body_site_depth_df = pd.DataFrame()
#     body_site_depth_df["percentage"] = [15 for j in range(len(depth_15[i]))]
#     body_site_depth_df["depth"] = depth_15[i]
#     body_site_depth_df["body site"] = [all_body_sites[i] for j in range(len(depth_15[i]))]
#     depth_df = pd.concat([depth_df, body_site_depth_df], ignore_index=True)
#
# sns.boxplot(data=depth_df, x="depth", y="body site", hue="percentage")
#
# plt.show()


def load_dataset(path):
    data = pd.read_csv(path,sep='\t')
    return data


#
# asd_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/asd/RDP/asd_son.otu_table.100.denovo.rdp_assigned")
# asd_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/asd/asd_son.metadata.txt")
# asd_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# asd_metadata.rename(columns={"Library_Name_s": "#SampleID"}, inplace=True)

#print(asd_sick_and_healthy_data)
def check_sick_against_healthy(data, metadata, t, l, psi, outliers_percentage, file_name, times):

    data = data.loc[:, data.sum() > 0] # filter samples with no data
    data = data.T.drop_duplicates().T
    s = (data.columns).intersection(metadata["#SampleID"])
    data = data.loc[:, s]
    metadata = metadata[metadata["#SampleID"].isin(s)]

    healthy_metadata = metadata[metadata["DiseaseState"] == "H"]
    healthy_data = data[healthy_metadata["#SampleID"]]

    sick_metadata = metadata[metadata["DiseaseState"] != "H"]
    outliers_count = int(outliers_percentage * len(healthy_data.iloc[0]) / (100 - outliers_percentage))

    A_depths, B_depths = [], []
    compare_depths = []
    auc_lst = []
    auc_IF = []
    p = []
    auc_p_r = []
    auc_IF_p_r = []

    for i in range(times):

        sick_data = data[sick_metadata["#SampleID"]].sample(n=outliers_count, axis=1)
        sick_samples = sick_data.columns

        healthy_samples = healthy_data.columns
        sick_and_healthy_data = pd.concat([healthy_data, sick_data], axis=1) #.reset_index(inplace=True)
        # sick_and_healthy_data = sick_and_healthy_data.iloc[:, 1:]
        sick_and_healthy_data = relative_abundence(sick_and_healthy_data)

        OF = Forest(0,[])
        OF.fit(sick_and_healthy_data, [], psi, l,t)

        # Test
        now_A_depths, now_B_depths = test_groups_by_depths(sick_samples,healthy_samples, OF)
        A_depths.append(now_A_depths)
        B_depths.append(now_B_depths)
        cd = (sum(now_A_depths) / len(now_A_depths)) < (sum(now_B_depths) / len(now_B_depths))
        compare_depths.append(cd)
        U1, now_p = mannwhitneyu(now_A_depths, now_B_depths, alternative="less")
        p.append(now_p)
        y_true = len(healthy_samples) * [1] + len(sick_samples) * [0]
        auc_lst.append(roc_auc_score(y_true, now_B_depths + now_A_depths))

        model = IsolationForest(n_estimators=t)
        model.fit(sick_and_healthy_data.transpose())
        scores = model.decision_function(sick_and_healthy_data.transpose())  # higher score means more normal
        auc_IF.append(roc_auc_score(y_true, scores))
        precision_IF, recall_IF, thresholds_IF = precision_recall_curve(y_true, scores)
        auc_IF_p_r.append(auc(recall_IF, precision_IF))
        #

        probs = now_B_depths + now_A_depths

        # probs = [x / math.ceil(l) for x in probs]

        precision, recall, thresholds = precision_recall_curve(y_true, probs)
        auc_p_r.append(auc(recall, precision))

    write_list_of_lists_to_file(file_name, A_depths, "anomalies depths")
    write_list_of_lists_to_file(file_name, B_depths, "normal depths")
    write_list_to_file(file_name, compare_depths, "compare depths")
    write_list_to_file(file_name, p, "p values")
    write_list_to_file(file_name, auc_lst, "auc")
    write_list_to_file(file_name, auc_IF, "auc IF")
    write_list_to_file(file_name, auc_p_r, "auc precision recall")
    write_list_to_file(file_name, auc_IF_p_r, "auc IF precision recall")

    # with open(file_name + ".txt", "a") as outfile:
    #     outfile.write("compare depths" + "\n" + str(compare_depths) + "\n")
    #     outfile.write("p values" + "\n" + str(p) + "\n")
    #     outfile.write("auc of depths" + "\n" + str(auc) + "\n")
    #     outfile.write("auc of IF" + "\n" + str(IF_auc) + "\n")

    # outfile.close()


    return A_depths, B_depths, compare_depths, p, auc_lst, auc_IF, auc_p_r, auc_IF_p_r




# autism_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/autism/RDP/autism_kb.otu_table.100.denovo.rdp_assigned")
# autism_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/autism/autism_kb.metadata.txt")
# autism_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# autism_metadata.rename(columns={"#Sample ID": "#SampleID"}, inplace=True)


# huttenhower_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/huttenhower/RDP/ibd_huttenhower.otu_table.100.denovo.rdp_assigned")
# huttenhower_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/huttenhower/ibd_huttenhower.metadata.txt")
# huttenhower_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# huttenhower_metadata = huttenhower_metadata[huttenhower_metadata["DiseaseState"] != " "]
# huttenhower_metadata = huttenhower_metadata[huttenhower_metadata["DiseaseState"] != "UC"]
# huttenhower_data = huttenhower_data[huttenhower_metadata["#SampleID"]]


# zupancic_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zupancic/RDP/ob_zupancic.otu_table.100.denovo.rdp_assigned")
# zupancic_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zupancic/ob_zupancic.metadata.txt")
# zupancic_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# zupancic_metadata.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# zupancic_metadata = zupancic_metadata.dropna().reset_index(drop=True) # nan option in DiseaseState
# zupancic_data = zupancic_data[zupancic_metadata["#SampleID"]]


# A_depths, B_depths, compare_depths, p, auc = check_sick_against_healthy(zupancic_data, zupancic_metadata, 10, math.log(len(zupancic_data.columns),2), 2000, 5, "zupancic, 10 trees, 5%, 2000 sub-sample")
# print(A_depths)
# print(B_depths)
# print(compare_depths)
# print(p)
# print(auc)

# print(zupancic_data)
# print(zupancic_metadata["DiseaseState"].unique()) # ['H' 'OB']
# print(zupancic_metadata)

# print(youngster_metadata["DiseaseState"].unique()) # ['H' 'CDI' 'postFMT_CDI']
# print(huttenhower_metadata["DiseaseState"].unique()) # ['CD' 'UC' 'H']



# t = 50
# l = math.log(len(schubert_data.columns),2)
# psi = 2000
# outliers_percentage = 5
# title = "schubert, " + str(t) + " trees " + str(outliers_percentage) + "% outliers " + str(psi) + " sub-sample"
# i = 0
# A_depths, B_depths, compare_depths, p, auc, IF_auc = check_sick_against_healthy(schubert_data, schubert_metadata, t=t, l=l, psi=psi, outliers_percentage=outliers_percentage,  file_name=title)

# A_depths_30 = []
# B_depths_30 = []
# compare_depths_30= []
# p_30 = []
# auc_30 = []
# IF_auc_30 = []
# while i < 30:
#     A_depths, B_depths, compare_depths, p, auc, IF_auc = check_sick_against_healthy(schubert_data, schubert_metadata, t=t, l=l, psi=psi, outliers_percentage=outliers_percentage,  file_name=title)
#     A_depths_30.append(A_depths)
#     B_depths_30.append(B_depths)
#     compare_depths_30.append(compare_depths)
#     p_30.append(p)
#     auc_30.append(auc)
#     IF_auc_30.append(IF_auc)
#     i += 1
#
# with open(title + ".txt", "a") as outfile:
#     write_list_to_file(title, compare_depths_30, "compare depths")
#     write_list_to_file(title, p_30, "p values")
#     write_list_to_file(title, auc_30, "auc of depths")
#     write_list_to_file(title, IF_auc_30, "auc of IF")
#
# outfile.close()
#
# print(A_depths_30)
# print(B_depths_30)

# auc_of_depths = [0.8733766233766234, 0.9131493506493507, 0.9557629870129871, 0.7711038961038962, 0.7402597402597403, 0.9435876623376624, 0.7118506493506493, 0.8806818181818183, 0.9293831168831168, 0.9500811688311688, 0.8745941558441558, 0.8429383116883117, 0.9306006493506493, 0.8693181818181818, 0.8413149350649349, 0.8993506493506493, 0.9107142857142857, 0.8721590909090909, 0.8007305194805194, 0.8246753246753247, 0.8948863636363636, 0.7869318181818182, 0.8027597402597403, 0.8031655844155844, 0.9853896103896105, 0.9208603896103895, 0.7812499999999999, 0.9387175324675325, 0.8855519480519481, 0.6351461038961039]
# auc_of_IF = [0.23376623376623376, 0.4529220779220779, 0.288961038961039, 0.2077922077922078, 0.23660714285714285, 0.19967532467532467, 0.49918831168831174, 0.37743506493506496, 0.1525974025974026, 0.19074675324675322, 0.35714285714285715, 0.22970779220779222, 0.29788961038961037, 0.39042207792207795, 0.21266233766233766, 0.44805194805194803, 0.49837662337662336, 0.26785714285714285, 0.29464285714285715, 0.2857142857142857, 0.3486201298701299, 0.3400974025974026, 0.2426948051948052, 0.294237012987013, 0.22646103896103895, 0.33035714285714285, 0.2747564935064935, 0.26785714285714285, 0.27516233766233766, 0.12256493506493507]
# print(sum(auc_of_depths)/ len(auc_of_depths))
# print(sum(auc_of_IF)/ len(auc_of_IF))
# print(A_depths)
# print(B_depths)
# print(compare_depths)
# print(p)
# print(auc)
# print(IF_auc)


# baxter_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/baxter/RDP/crc_baxter.otu_table.100.denovo.rdp_assigned")
# baxter_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/baxter/crc_baxter.metadata.txt")
#
# baxter_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# baxter_metadata.rename(columns={"Sample_Name_s": "#SampleID"}, inplace=True)
# baxter_metadata = baxter_metadata[baxter_metadata["DiseaseState"] != "nonCRC"]
# baxter_metadata["#SampleID"] = baxter_metadata["#SampleID"].astype("string")

# goodrich_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/goodrich/RDP/ob_goodrich.otu_table.100.denovo.rdp_assigned")
# goodrich_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/goodrich/ob_goodrich.metadata.txt")
# goodrich_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# goodrich_metadata.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# goodrich_metadata = goodrich_metadata[goodrich_metadata["DiseaseState"] != "OW"]
#
# t = 50
# l = math.log(len(goodrich_data.columns),2)
# psi = 2000
# outliers_percentage = 2
# title = "goodrich, " + str(t) + " trees " + str(outliers_percentage) + "% outliers " + str(psi) + " sub-sample"
# i = 0
#
# A_depths_30 = []
# B_depths_30 = []
# compare_depths_30= []
# p_30 = []
# auc_30 = []
# IF_auc_30 = []
# while i < 30:
#     A_depths, B_depths, compare_depths, p, auc, IF_auc = check_sick_against_healthy(goodrich_data, goodrich_metadata, t=t, l=l, psi=psi, outliers_percentage=outliers_percentage,  file_name=title)
#     A_depths_30.append(A_depths)
#     B_depths_30.append(B_depths)
#     compare_depths_30.append(compare_depths)
#     p_30.append(p)
#     auc_30.append(auc)
#     IF_auc_30.append(IF_auc)
#     i += 1
#
# with open(title + ".txt", "a") as outfile:
#     write_list_to_file(title, compare_depths_30, "compare depths")
#     write_list_to_file(title, p_30, "p values")
#     write_list_to_file(title, auc_30, "auc of depths")
#     write_list_to_file(title, IF_auc_30, "auc of IF")
#
# outfile.close()
#
# print(A_depths_30)
# print(B_depths_30)


def betch_effect(data_lst, metadata_lst, outliers_percentage):
    healthy_data = pd.DataFrame()
    print("healthy")
    for i in range(len(data_lst)):
        healthy_metadata = metadata_lst[i][metadata_lst[i]["DiseaseState"] == "H"]
        healthy_data_i = data_lst[i][healthy_metadata["#SampleID"]]
        healthy_data = pd.concat([healthy_data, healthy_data_i], axis=1)
        print(healthy_data)
    healthy_samples = healthy_data.columns
    print(healthy_samples)

    sick_metadata = metadata_lst[0][metadata_lst[0]["DiseaseState"] != "H"]
    outliers_count = int(outliers_percentage * len(healthy_data.iloc[0]) / (100 - outliers_percentage))
    sick_data = data_lst[0][sick_metadata["#SampleID"]].sample(n=outliers_count, axis=1)
    sick_samples = sick_data.columns
    print("sick")
    print(sick_data)

    batch_effect_data = pd.concat([healthy_data, sick_data], axis=1)
    batch_effect_data.fillna(value=0, inplace=True)
    print(batch_effect_data)
    batch_effect_data = relative_abundence(batch_effect_data)
    return batch_effect_data, healthy_samples, sick_samples


def run_alg(batch_effect_data,healthy_samples, sick_samples, t, l, psi, file_name):

    OF = Forest(0,[])
    OF.fit(batch_effect_data, [], psi, l,t)

    # Test
    A_depths, B_depths = test_groups_by_depths(sick_samples,healthy_samples, OF)
    compare_depths = (sum(A_depths) / len(A_depths)) < (sum(B_depths) / len(B_depths))
    U1, p = mannwhitneyu(A_depths, B_depths, alternative="less")

    y_true = len(healthy_samples) * [1] + len(sick_samples) * [0]
    auc = roc_auc_score(y_true, B_depths + A_depths)

    model = IsolationForest(n_estimators=t)
    model.fit(batch_effect_data.transpose())
    scores = model.decision_function(batch_effect_data.transpose())  # higher score means more normal
    IF_auc = roc_auc_score(y_true, scores)

    write_list_to_file(file_name, A_depths, "anomalies depths")
    write_list_to_file(file_name, B_depths, "normal depths")
    with open(file_name + ".txt", "a") as outfile:
        outfile.write("compare depths" + "\n" + str(compare_depths) + "\n")
        outfile.write("p values" + "\n" + str(p) + "\n")
        outfile.write("auc of depths" + "\n" + str(auc) + "\n")
        outfile.write("auc of IF" + "\n" + str(IF_auc) + "\n")

    outfile.close()


    return A_depths, B_depths, compare_depths, p, auc, IF_auc



# psi = 2000
# outliers_percentage = 5
# t = 50
# data_lst = [baxter_data, zupancic_data, vincent_data, asd_data, autism_data]
# metadata_lst = [baxter_metadata, zupancic_metadata, vincent_metadata, asd_metadata, autism_metadata]
#
# betch_effect_data, healthy_samples, sick_samples = betch_effect(data_lst, metadata_lst, outliers_percentage)
#
# l = math.log(len(betch_effect_data.columns),2)
# title = "bacth effect, baxter, zupanic, vincent, asd and autism, " + str(t) + " trees " + str(outliers_percentage) + "% outliers " + str(psi) + " sub-sample"
#
#
# A_depths, B_depths, compare_depths, p, auc, IF_auc = run_alg(betch_effect_data, healthy_samples,sick_samples, t=t, l=l, psi=psi,  file_name=title)

#
#
# schubert_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/schubert/RDP/cdi_schubert.otu_table.100.denovo.rdp_assigned")
# schubert_metadata = pd.read_csv("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/schubert/cdi_schubert.metadata.txt",sep='\t', encoding= 'unicode_escape')
# schubert_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# schubert_metadata.rename(columns={"sample_id": "#SampleID"}, inplace=True)
# schubert_metadata = schubert_metadata[schubert_metadata["DiseaseState"] != "nonCDI"]
# schubert_metadata = schubert_metadata[schubert_metadata["#SampleID"] != 'DA00939']
#
#
# vincent_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/vincent/RDP/cdi_vincent_v3v5.otu_table.100.denovo.rdp_assigned")
# vincent_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/vincent/cdi_vincent_v3v5.metadata.txt")
# vincent_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# vincent_metadata.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
#
#
# youndster_data = load_dataset("C:\Maya\CS\AnomalyDetectionMicrobiome\Diseases\youngster\RDP\cdi_youngster.otu_table.100.denovo.rdp_assigned")
# youngster_metadata = load_dataset("C:\Maya\CS\AnomalyDetectionMicrobiome\Diseases\youngster\cdi_youngster.metadata.txt")
# youndster_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# youngster_metadata.rename(columns={"#Sample_id": "#SampleID"}, inplace=True)
# youngster_metadata = youngster_metadata[youngster_metadata["DiseaseState"] != "postFMT_CDI"].reset_index(drop=True)
# youngster_data = youndster_data[youngster_metadata["#SampleID"]].reset_index(drop=True)
#
# cdi_data = pd.concat([schubert_data, vincent_data], axis=1)
# cdi_data = pd.concat([cdi_data, youngster_data], axis=1)
# cdi_data.fillna(value=0, inplace=True)
# cdi_metadata = pd.concat([schubert_metadata, vincent_metadata], axis=0)
# cdi_metadata = pd.concat([cdi_metadata, youngster_metadata], axis=0)
# cdi_metadata.fillna(value=0, inplace=True)
# cols = cdi_data.columns.isin(cdi_metadata["#SampleID"])
# cdi_data = cdi_data.iloc[:,cols]
# # cdi_metadata = cdi_metadata[cdi_metadata["#SampleID"].isin(cols)]
# cdi_data = cdi_data.T.drop_duplicates().T
# print(cdi_data)
# print(cdi_metadata)


# crc
#
# baxter_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/baxter/RDP/crc_baxter.otu_table.100.denovo.rdp_assigned")
# baxter_metadata = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/baxter/crc_baxter.metadata.txt")
# baxter_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# baxter_metadata.rename(columns={"Sample_Name_s": "#SampleID"}, inplace=True)
# baxter_metadata = baxter_metadata[baxter_metadata["DiseaseState"] != "nonCRC"]
# baxter_metadata["#SampleID"] = baxter_metadata["#SampleID"].astype("string")
#
#
# zeller_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zeller/RDP/crc_zeller.otu_table.100.denovo.rdp_assigned")
# zeller_metadata = pd.read_csv("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zeller/crc_zeller.metadata.txt", sep='\t', encoding= 'unicode_escape')
# zeller_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# zeller_metadata.rename(columns={"Subject ID": "#SampleID"}, inplace=True)


# zhao_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zhao/RDP/crc_zhao.otu_table.100.denovo.rdp_assigned")
# zhao_metadata = pd.read_csv("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zhao/crc_zhao.metadata.txt", sep='\t', encoding= 'unicode_escape')
# zhao_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
#
#
# zackular_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zackular/RDP/crc_zackular.otu_table.100.denovo.rdp_assigned")
# zackular_metadata = pd.read_csv("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/zackular/crc_zackular.metadata.txt", sep='\t', encoding= 'unicode_escape')
# zackular_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
# zackular_metadata.rename(columns={"sample_id": "#SampleID"}, inplace=True)
# zackular_metadata = zackular_metadata[zackular_metadata["DiseaseState"] != "nonCRC"]
#
# xiang_data = load_dataset("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/xiang/RDP/crc_xiang.otu_table.100.denovo.rdp_assigned")
# xiang_metadata = pd.read_csv("C:/Maya/CS/AnomalyDetectionMicrobiome/Diseases/xiang/crc_xiang.metadata.txt", sep='\t', encoding= 'unicode_escape')
# xiang_data.rename(columns={"Unnamed: 0": "#SampleID"}, inplace=True)
#

def concat_data_frames(lst, axis):
    df = pd.DataFrame()
    for d in lst:
        df = pd.concat([df, d], axis=axis)
    df.fillna(value=0, inplace=True)
    return df
#
# crc_data_lst = [baxter_data, xiang_data, zeller_data, zackular_data, zhao_data]
# crc_data = concat_data_frames(crc_data_lst, axis=1)
# crc_metadata_lst = [baxter_metadata, xiang_metadata, zeller_metadata, zackular_metadata, zhao_metadata]
# crc_metadata = concat_data_frames(crc_metadata_lst, axis=0)
#
# s = (crc_data.columns).intersection(crc_metadata["#SampleID"])
# crc_data = crc_data.loc[:,s]
#
# crc_metadata = crc_metadata[crc_metadata["#SampleID"].isin(s)]

# psi = 2000
# outliers_percentage = 5
# t = 50
# l = math.log(len(crc_data.columns),2)
# file_name = "crc diseases " + str(t) + " trees " + str(outliers_percentage) + "% outliers " + str(psi) + " sub-sample"

# check_sick_against_healthy(crc_data, crc_metadata, t, l, psi, outliers_percentage, file_name, 1)

# psi = 2000
# outliers_percentage = 5
# t = 50
# l = math.log(len(crc_data.columns),2)



# auc_crc_cdi = [[0.5407668231611894, 0.47018779342723005, 0.651017214397496, 0.529264475743349, 0.48348982785602507, 0.6065727699530516, 0.5561815336463223, 0.38067292644757433, 0.5251956181533646, 0.5075117370892019, 0.5387323943661971, 0.41025039123630674, 0.5486697965571204, 0.552660406885759, 0.5779342723004695, 0.6345852895148669, 0.48231611893583726, 0.560641627543036, 0.45485133020344287, 0.581846635367762, 0.5892018779342723, 0.5389671361502347, 0.6758998435054773, 0.632942097026604, 0.5661971830985915, 0.46627543035993735],[0.8093908629441624, 0.6898477157360405, 0.7035532994923858, 0.7253807106598984, 0.7855329949238579, 0.7807106598984772, 0.7139593908629441, 0.76751269035533, 0.7903553299492385, 0.718527918781726, 0.8131979695431472, 0.7893401015228426, 0.7251269035532995, 0.733502538071066, 0.767005076142132, 0.800253807106599, 0.6969543147208122, 0.7510152284263959, 0.7083756345177665, 0.7779187817258884, 0.7804568527918782, 0.7609137055837564, 0.7129441624365482, 0.7464467005076142, 0.784517766497462, 0.7540609137055838]]
# auc_IF_crc_cdi = [[0.5472613458528952, 0.5889671361502347, 0.5347417840375587, 0.47496087636932705, 0.47660406885758994, 0.5708137715179968, 0.5249608763693271, 0.660641627543036, 0.433489827856025, 0.5158059467918623, 0.5569640062597808, 0.50320813771518, 0.4550078247261346, 0.47104851330203446, 0.5002347417840376, 0.6369327073552425, 0.4604068857589984, 0.5064945226917058, 0.5096244131455399, 0.496322378716745, 0.42589984350547727, 0.4784820031298905, 0.40031298904538337, 0.52339593114241, 0.49921752738654146, 0.5977308294209703],[0.2776649746192893, 0.42258883248730966, 0.5426395939086294, 0.683248730964467, 0.4576142131979695, 0.7261421319796955, 0.616243654822335, 0.38781725888324875, 0.5786802030456853, 0.6309644670050761, 0.6203045685279188, 0.7540609137055837, 0.4527918781725888, 0.32512690355329943, 0.3614213197969543, 0.366497461928934, 0.5675126903553299, 0.46167512690355333, 0.5362944162436548, 0.5609137055837563, 0.43147208121827413, 0.5880710659898477, 0.5248730964467005, 0.7121827411167513, 0.3365482233502538, 0.5720812182741116]]
# print(len(auc_crc_cdi[1]))
# print(len(auc_IF_crc_cdi[1]))
# box_plot_hue(auc_crc_cdi, auc_IF_crc_cdi, ["Colorectal cancer", "Clostridioides difficile"], "26 times auc for Omri Tree and Isolation Forest, 50 trees, 5% outliers, 2000 sub-sample")

# l = math.log(len(cdi_data.columns),2)
# file_name = "cdi diseases " + str(t) + " trees " + str(outliers_percentage) + "% outliers " + str(psi) + " sub-sample"
#
# print(cdi_data)
# print(cdi_metadata)
# for i in range(5):
#     check_sick_against_healthy(cdi_data, cdi_metadata, t, l, psi, outliers_percentage, file_name)

def kde(A_depths, B_depths):
    all_A = []
    for lst in A_depths:
        for m in lst:
            all_A.append(m)
    all_B = []
    for lst in B_depths:
        for m in lst:
            all_B.append(m)
    sns.kdeplot(data=all_A)
    sns.kdeplot(data=all_B)
    plt.show()


